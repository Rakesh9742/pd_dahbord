import { MouseEvent } from 'react';
import { InheritedColorConfig } from '@nivo/colors';
import { BumpCommonProps, BumpDatum, DefaultBumpDatum, BumpDataProps, BumpComputedSerie, BumpPoint, BumpLabel, BumpLabelData, BumpSerieExtraProps, BumpPointMouseHandler, BumpSerieMouseHandler } from './types';
export declare const useBump: <Datum extends BumpDatum = DefaultBumpDatum, ExtraProps extends BumpSerieExtraProps = Record<string, never>>({ width, height, data, interpolation, xPadding, xOuterPadding, yOuterPadding, lineWidth, activeLineWidth, inactiveLineWidth, colors, opacity, activeOpacity, inactiveOpacity, pointSize, activePointSize, inactivePointSize, pointColor, pointBorderWidth, activePointBorderWidth, inactivePointBorderWidth, pointBorderColor, isInteractive, defaultActiveSerieIds, }: {
    width: number;
    height: number;
    data: BumpDataProps<Datum, ExtraProps>["data"];
    interpolation: BumpCommonProps<Datum, ExtraProps>["interpolation"];
    xPadding: BumpCommonProps<Datum, ExtraProps>["xPadding"];
    xOuterPadding: BumpCommonProps<Datum, ExtraProps>["xOuterPadding"];
    yOuterPadding: BumpCommonProps<Datum, ExtraProps>["yOuterPadding"];
    lineWidth: BumpCommonProps<Datum, ExtraProps>["lineWidth"];
    activeLineWidth: BumpCommonProps<Datum, ExtraProps>["activeLineWidth"];
    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>["inactiveLineWidth"];
    colors: BumpCommonProps<Datum, ExtraProps>["colors"];
    opacity: BumpCommonProps<Datum, ExtraProps>["opacity"];
    activeOpacity: BumpCommonProps<Datum, ExtraProps>["activeOpacity"];
    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>["inactiveOpacity"];
    pointSize: BumpCommonProps<Datum, ExtraProps>["pointSize"];
    activePointSize: BumpCommonProps<Datum, ExtraProps>["activePointSize"];
    inactivePointSize: BumpCommonProps<Datum, ExtraProps>["inactivePointSize"];
    pointColor: BumpCommonProps<Datum, ExtraProps>["pointColor"];
    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>["pointBorderWidth"];
    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>["activePointBorderWidth"];
    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>["inactivePointBorderWidth"];
    pointBorderColor: BumpCommonProps<Datum, ExtraProps>["pointBorderColor"];
    isInteractive: BumpCommonProps<Datum, ExtraProps>["isInteractive"];
    defaultActiveSerieIds: string[];
}) => {
    xScale: import("@nivo/scales").ScalePoint<Datum["x"]>;
    yScale: import("@nivo/scales").ScalePoint<number>;
    series: BumpComputedSerie<Datum, ExtraProps>[];
    points: BumpPoint<Datum, ExtraProps>[];
    lineGenerator: import("d3-shape").Line<[number, number | null]>;
    activeSerieIds: string[];
    setActiveSerieIds: import("react").Dispatch<import("react").SetStateAction<string[]>>;
    activePointIds: string[];
    setActivePointIds: import("react").Dispatch<import("react").SetStateAction<string[]>>;
};
export declare const useBumpSerieHandlers: <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({ serie, isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onMouseDown, onMouseUp, onClick, onDoubleClick, setActiveSerieIds, lineTooltip: tooltip, }: {
    serie: BumpComputedSerie<Datum, ExtraProps>;
    isInteractive: BumpCommonProps<Datum, ExtraProps>["isInteractive"];
    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onMouseDown?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onMouseUp?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>;
    onDoubleClick?: BumpSerieMouseHandler<Datum, ExtraProps>;
    setActiveSerieIds: (serieIds: string[]) => void;
    lineTooltip: BumpCommonProps<Datum, ExtraProps>["lineTooltip"];
}) => {
    onMouseEnter: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseMove: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseLeave: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseDown: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseUp: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onClick: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onDoubleClick: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
};
export declare const useBumpPointHandlers: <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({ point, isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onMouseDown, onMouseUp, onClick, onDoubleClick, setActivePointIds, setActiveSerieIds, pointTooltip: tooltip, }: {
    point: BumpPoint<Datum, ExtraProps>;
    isInteractive: BumpCommonProps<Datum, ExtraProps>["isInteractive"];
    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>;
    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>;
    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>;
    onMouseDown?: BumpPointMouseHandler<Datum, ExtraProps>;
    onMouseUp?: BumpPointMouseHandler<Datum, ExtraProps>;
    onClick?: BumpPointMouseHandler<Datum, ExtraProps>;
    onDoubleClick?: BumpPointMouseHandler<Datum, ExtraProps>;
    setActivePointIds: (pointIds: string[]) => void;
    setActiveSerieIds: (pointIds: string[]) => void;
    pointTooltip: BumpCommonProps<Datum, ExtraProps>["pointTooltip"];
}) => {
    onMouseEnter: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseMove: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseLeave: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseDown: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseUp: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onClick: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onDoubleClick: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
};
export declare const useBumpSeriesLabels: <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({ series, position, padding, color, getLabel, }: {
    series: BumpComputedSerie<Datum, ExtraProps>[];
    position: "start" | "end";
    padding: number;
    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>;
    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>;
}) => BumpLabelData<Datum, ExtraProps>[];
//# sourceMappingURL=hooks.d.ts.map