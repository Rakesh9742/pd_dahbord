import { MouseEvent } from 'react';
import { InheritedColorConfig } from '@nivo/colors';
import { AreaBumpAreaPoint, AreaBumpCommonProps, AreaBumpComputedSerie, AreaBumpDataProps, AreaBumpDatum, AreaBumpLabel, AreaBumpLabelData, AreaBumpSerieExtraProps, DefaultAreaBumpDatum } from './types';
export declare const useAreaBump: <Datum extends AreaBumpDatum = DefaultAreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>>({ data, width, height, align, spacing, xPadding, interpolation, colors, fillOpacity, activeFillOpacity, inactiveFillOpacity, borderWidth, activeBorderWidth, inactiveBorderWidth, borderColor, borderOpacity, activeBorderOpacity, inactiveBorderOpacity, isInteractive, defaultActiveSerieIds, }: {
    data: AreaBumpDataProps<Datum, ExtraProps>["data"];
    width: number;
    height: number;
    align: AreaBumpCommonProps<Datum, ExtraProps>["align"];
    spacing: AreaBumpCommonProps<Datum, ExtraProps>["spacing"];
    xPadding: AreaBumpCommonProps<Datum, ExtraProps>["xPadding"];
    interpolation: AreaBumpCommonProps<Datum, ExtraProps>["interpolation"];
    colors: AreaBumpCommonProps<Datum, ExtraProps>["colors"];
    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>["fillOpacity"];
    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>["activeFillOpacity"];
    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>["inactiveFillOpacity"];
    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>["borderWidth"];
    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>["activeBorderWidth"];
    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>["inactiveBorderWidth"];
    borderColor: AreaBumpCommonProps<Datum, ExtraProps>["borderColor"];
    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>["borderOpacity"];
    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>["activeBorderOpacity"];
    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>["inactiveBorderOpacity"];
    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>["isInteractive"];
    defaultActiveSerieIds: string[];
}) => {
    series: AreaBumpComputedSerie<Datum, ExtraProps>[];
    xScale: import("@nivo/scales").ScalePoint<Datum["x"]>;
    heightScale: import("@nivo/scales").ScaleLinear<number>;
    areaGenerator: import("d3-shape").Area<AreaBumpAreaPoint>;
    activeSerieIds: string[];
    setActiveSerieIds: import("react").Dispatch<import("react").SetStateAction<string[]>>;
};
export declare const useAreaBumpSerieHandlers: <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({ serie, isInteractive, onMouseEnter, onMouseMove, onMouseLeave, onClick, setActiveSerieIds, tooltip, }: {
    serie: AreaBumpComputedSerie<Datum, ExtraProps>;
    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>["isInteractive"];
    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>["onMouseEnter"];
    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>["onMouseMove"];
    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>["onMouseLeave"];
    onClick?: AreaBumpCommonProps<Datum, ExtraProps>["onClick"];
    setActiveSerieIds: (serieIds: string[]) => void;
    tooltip: AreaBumpCommonProps<Datum, ExtraProps>["tooltip"];
}) => {
    onMouseEnter: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseMove: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onMouseLeave: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
    onClick: ((event: MouseEvent<SVGPathElement>) => void) | undefined;
};
export declare const useAreaBumpSeriesLabels: <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({ series, position, padding, color, getLabel, }: {
    series: AreaBumpComputedSerie<Datum, ExtraProps>[];
    position: "start" | "end";
    padding: number;
    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>;
    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>;
}) => AreaBumpLabelData<Datum, ExtraProps>[];
//# sourceMappingURL=hooks.d.ts.map