{"version":3,"file":"nivo-bump.mjs","sources":["../src/bump/compute.ts","../src/bump/hooks.ts","../src/bump/Point.tsx","../src/bump/defaults.ts","../src/bump/LineTooltip.tsx","../src/bump/PointTooltip.tsx","../src/bump/Line.tsx","../src/bump/LinesLabels.tsx","../src/bump/Mesh.tsx","../src/bump/Bump.tsx","../src/bump/ResponsiveBump.tsx","../src/bump/types.ts","../src/area-bump/hooks.ts","../src/area-bump/compute.ts","../src/area-bump/Area.tsx","../src/area-bump/AreasLabels.tsx","../src/area-bump/defaults.ts","../src/area-bump/AreaTooltip.tsx","../src/area-bump/AreaBump.tsx","../src/area-bump/ResponsiveAreaBump.tsx"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/theming'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n    BumpPointMouseHandler,\n    BumpSerieMouseHandler,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activePointIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activePointIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activePointIds.length === 0) return getNormalStyle(point)\n            if (activePointIds.includes(point.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activePointIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>,\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n    const [activePointIds, setActivePointIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activePointIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-expect-error\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, activeSerieIds, getPointColor, getPointBorderColor, getPointStyle])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n        activePointIds,\n        setActivePointIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setActiveSerieIds,\n    lineTooltip: tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter?.(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove?.(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave?.(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onMouseDown?.(serie, event)\n        },\n        [serie, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onMouseUp?.(serie, event)\n        },\n        [serie, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick?.(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onDoubleClick?.(serie, event)\n        },\n        [serie, onDoubleClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onMouseDown: isInteractive ? handleMouseDown : undefined,\n            onMouseUp: isInteractive ? handleMouseUp : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n            onDoubleClick: isInteractive ? handleDoubleClick : undefined,\n        }),\n        [\n            isInteractive,\n            handleMouseEnter,\n            handleMouseMove,\n            handleMouseLeave,\n            handleMouseDown,\n            handleMouseUp,\n            handleClick,\n            handleDoubleClick,\n        ]\n    )\n}\n\nexport const useBumpPointHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n>({\n    point,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setActivePointIds,\n    setActiveSerieIds,\n    pointTooltip: tooltip,\n}: {\n    point: BumpPoint<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    setActivePointIds: (pointIds: string[]) => void\n    setActiveSerieIds: (pointIds: string[]) => void\n    pointTooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter?.(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, setActivePointIds, setActiveSerieIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            onMouseMove?.(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave?.(point, event)\n        },\n        [hideTooltip, setActivePointIds, setActiveSerieIds, onMouseLeave, point]\n    )\n\n    const handleMouseDown = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onMouseDown?.(point, event)\n        },\n        [point, onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onMouseUp?.(point, event)\n        },\n        [point, onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick?.(point, event)\n        },\n        [point, onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onDoubleClick?.(point, event)\n        },\n        [point, onDoubleClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onMouseDown: isInteractive ? handleMouseDown : undefined,\n            onMouseUp: isInteractive ? handleMouseUp : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n            onDoubleClick: isInteractive ? handleDoubleClick : undefined,\n        }),\n        [\n            isInteractive,\n            handleMouseEnter,\n            handleMouseMove,\n            handleMouseLeave,\n            handleMouseDown,\n            handleMouseUp,\n            handleClick,\n            handleDoubleClick,\n        ]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point?.[0] === null || point?.[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie) as string,\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = {\n    pointerEvents: 'none',\n}\n\nexport interface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, DefaultBumpDatum, BumpSvgPropsWithDefaults } from './types'\nimport PointTooltip from './PointTooltip'\n\nconst commonDefaultProps: BumpCommonProps<DefaultBumpDatum, Record<string, unknown>> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points', 'mesh'],\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    lineTooltip: LineTooltip,\n    pointTooltip: PointTooltip,\n    useMesh: false,\n    debugMesh: false,\n    role: 'img',\n    renderWrapper: true,\n}\n\nexport const bumpSvgDefaultProps: Omit<\n    BumpSvgPropsWithDefaults<DefaultBumpDatum, Record<string, unknown>>,\n    'width' | 'height' | 'data'\n> = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\ninterface PointTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nconst LinePointTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointTooltipProps<Datum, ExtraProps>) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.x}</strong>, y: <strong>{point.data.y}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serie.color}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    BumpCommonProps,\n    BumpComputedSerie,\n    BumpDatum,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n} from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n    useMesh: BumpCommonProps<Datum, ExtraProps>['useMesh']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    setActiveSerieIds,\n    lineTooltip,\n    useMesh,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onMouseDown,\n        onMouseUp,\n        onClick,\n        onDoubleClick,\n        setActiveSerieIds,\n        lineTooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && !useMesh && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onMouseDown={handlers.onMouseDown}\n                    onMouseUp={handlers.onMouseUp}\n                    onClick={handlers.onClick}\n                    onDoubleClick={handlers.onDoubleClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { Text } from '@nivo/text'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <Text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </Text>\n                )\n            })}\n        </>\n    )\n}\n","import { MouseEvent } from 'react'\nimport { createElement, memo, useCallback } from 'react'\nimport { Margin } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport {\n    BumpCommonProps,\n    BumpDatum,\n    BumpPoint,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n} from './types'\n\ninterface MeshProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    width: number\n    height: number\n    margin: Margin\n    setActivePointIds: (ids: string[]) => void\n    setActiveSerieIds: (ids: string[]) => void\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    tooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n    debug: boolean\n}\n\nconst InnerMesh = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    width,\n    height,\n    margin,\n    setActivePointIds,\n    setActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    tooltip,\n    debug,\n}: MeshProps<Datum, ExtraProps>) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter?.(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseEnter,\n        ]\n    )\n\n    const handleMouseMove = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseMove?.(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseMove,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave?.(point, event)\n        },\n        [hideTooltip, onMouseLeave, setActivePointIds, setActiveSerieIds]\n    )\n\n    const handleMouseDown = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onMouseDown?.(point, event)\n        },\n        [onMouseDown]\n    )\n\n    const handleMouseUp = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onMouseUp?.(point, event)\n        },\n        [onMouseUp]\n    )\n\n    const handleClick = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onClick?.(point, event)\n        },\n        [onClick]\n    )\n\n    const handleDoubleClick = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onDoubleClick?.(point, event)\n        },\n        [onDoubleClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n            onDoubleClick={handleDoubleClick}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(InnerMesh) as typeof InnerMesh\n","import { createElement, useMemo, Fragment, ReactNode, forwardRef, ReactElement, Ref } from 'react'\nimport { Container, useDimensions, SvgWrapper, WithChartRef } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n    BumpSvgProps,\n    BumpSvgPropsWithDefaults,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Mesh } from './Mesh'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = bumpSvgDefaultProps.layers as BumpLayerId[],\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n    colors = bumpSvgDefaultProps.colors as BumpSvgPropsWithDefaults<Datum, ExtraProps>['colors'],\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n    startLabel = bumpSvgDefaultProps.startLabel as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['startLabel'],\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['startLabelTextColor'],\n    endLabel = bumpSvgDefaultProps.endLabel as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['endLabel'],\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['endLabelTextColor'],\n    pointComponent = bumpSvgDefaultProps.pointComponent as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['pointComponent'],\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['pointColor'],\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['pointBorderColor'],\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onDoubleClick,\n    useMesh = bumpSvgDefaultProps.useMesh,\n    debugMesh = bumpSvgDefaultProps.debugMesh,\n    lineTooltip = bumpSvgDefaultProps.lineTooltip as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['lineTooltip'],\n    pointTooltip = bumpSvgDefaultProps.pointTooltip as BumpSvgPropsWithDefaults<\n        Datum,\n        ExtraProps\n    >['pointTooltip'],\n    role = bumpSvgDefaultProps.role,\n    forwardedRef,\n}: InnerBumpProps<Datum, ExtraProps> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        series,\n        points,\n        xScale,\n        yScale,\n        lineGenerator,\n        activePointIds,\n        activeSerieIds,\n        setActiveSerieIds,\n        setActivePointIds,\n    } = useBump<Datum, ExtraProps>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        interpolation,\n        xPadding,\n        xOuterPadding,\n        yOuterPadding,\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointColor,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        pointBorderColor,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseMove={onMouseMove as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseLeave={onMouseLeave as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseDown={onMouseDown as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseUp={onMouseUp as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onClick={onClick as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onDoubleClick={onDoubleClick as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        lineTooltip={lineTooltip}\n                        useMesh={useMesh}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (isInteractive && useMesh && layers.includes('mesh')) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                setActivePointIds={setActivePointIds}\n                setActiveSerieIds={setActiveSerieIds}\n                onMouseEnter={onMouseEnter as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseMove={onMouseMove as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseLeave={onMouseLeave as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseDown={onMouseDown as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseUp={onMouseUp as BumpPointMouseHandler<Datum, ExtraProps>}\n                onClick={onClick as BumpPointMouseHandler<Datum, ExtraProps>}\n                onDoubleClick={onDoubleClick as BumpPointMouseHandler<Datum, ExtraProps>}\n                tooltip={pointTooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            activePointIds,\n            setActiveSerieIds,\n            setActivePointIds,\n        }),\n        [\n            activePointIds,\n            activeSerieIds,\n            setActivePointIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = forwardRef(\n    <\n        Datum extends BumpDatum = DefaultBumpDatum,\n        ExtraProps extends BumpSerieExtraProps = Record<string, unknown>,\n    >(\n        {\n            isInteractive = bumpSvgDefaultProps.isInteractive,\n            animate = bumpSvgDefaultProps.animate,\n            motionConfig = bumpSvgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...otherProps\n        }: BumpSvgProps<Datum, ExtraProps>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            {...{\n                animate,\n                isInteractive,\n                motionConfig,\n                renderWrapper,\n                theme,\n            }}\n        >\n            <InnerBump<Datum, ExtraProps>\n                isInteractive={isInteractive}\n                {...otherProps}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, unknown>,\n>(\n    props: WithChartRef<BumpSvgProps<Datum, ExtraProps>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport {\n    BumpDatum,\n    BumpSvgPropsWithSeriesMouseHandlers,\n    BumpSvgPropsWithPointMouseHandlers,\n    BumpSerieExtraProps,\n    DefaultBumpDatum,\n} from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = forwardRef(\n    <\n        Datum extends BumpDatum = DefaultBumpDatum,\n        ExtraProps extends BumpSerieExtraProps = Record<string, unknown>,\n    >(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }:\n            | ResponsiveProps<BumpSvgPropsWithSeriesMouseHandlers<Datum, ExtraProps>>\n            | ResponsiveProps<BumpSvgPropsWithPointMouseHandlers<Datum, ExtraProps>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <Bump<Datum, ExtraProps> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, unknown>,\n>(\n    props:\n        | WithChartRef<\n              ResponsiveProps<BumpSvgPropsWithSeriesMouseHandlers<Datum, ExtraProps>>,\n              SVGSVGElement\n          >\n        | WithChartRef<\n              ResponsiveProps<BumpSvgPropsWithPointMouseHandlers<Datum, ExtraProps>>,\n              SVGSVGElement\n          >\n) => ReactElement | null\n","import { FunctionComponent, MouseEvent } from 'react'\nimport { Line as D3Line } from 'd3-shape'\nimport { Box, Dimensions, MotionProps } from '@nivo/core'\nimport { PartialTheme } from '@nivo/theming'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { AxisProps } from '@nivo/axes'\nimport { ScalePoint } from '@nivo/scales'\nimport { PointProps } from './Point'\n\nexport interface BumpDatum {\n    x: number | string\n    y: number | null\n}\n\nexport interface DefaultBumpDatum {\n    x: string\n    y: number\n}\n\nexport type BumpSerieExtraProps = Record<string, unknown>\n\nexport type BumpSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = ExtraProps & {\n    id: string\n    data: Datum[]\n}\n\nexport interface BumpSeriePoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n}\n\nexport interface BumpPoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n    isActive: boolean\n    isInactive: boolean\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\nexport type BumpPointComponent<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = FunctionComponent<PointProps<Datum, ExtraProps>>\n\nexport interface BumpComputedSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> {\n    id: string\n    data: BumpSerie<Datum, ExtraProps>\n    points: BumpSeriePoint<Datum, ExtraProps>[]\n    linePoints: [number, number | null][]\n    color: string\n    opacity: number\n    lineWidth: number\n}\n\nexport type BumpDataProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = {\n    data: BumpSerie<Datum, ExtraProps>[]\n}\n\nexport type BumpInterpolation = 'smooth' | 'linear'\n\nexport type BumpLabel<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | ((serie: BumpSerie<Datum, ExtraProps>) => string)\n    | boolean\nexport interface BumpLabelData<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    id: string\n    label: string\n    x: number\n    y: number\n    color: string\n    opacity: number\n    textAnchor: 'start' | 'end'\n}\n\nexport type BumpSerieMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = (serie: BumpComputedSerie<Datum, ExtraProps>, event: MouseEvent<SVGPathElement>) => void\nexport type BumpPointMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => void\nexport type BumpMouseHandler<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpSerieMouseHandler<Datum, ExtraProps>\n    | BumpPointMouseHandler<Datum, ExtraProps>\n\nexport type BumpLayerId = 'grid' | 'axes' | 'labels' | 'lines' | 'points' | 'mesh'\nexport interface BumpCustomLayerProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> {\n    innerHeight: number\n    innerWidth: number\n    lineGenerator: D3Line<[number, number | null]>\n    points: BumpPoint<Datum, ExtraProps>[]\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    xScale: ScalePoint<Datum['x']>\n    yScale: ScalePoint<number>\n    activeSerieIds: string[]\n    activePointIds: string[]\n    setActiveSerieIds: (serieIds: string[]) => void\n    setActivePointIds: (pointIds: string[]) => void\n}\nexport type BumpCustomLayer<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = FunctionComponent<BumpCustomLayerProps<Datum, ExtraProps>>\nexport type BumpLayer<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpLayerId\n    | BumpCustomLayer<Datum, ExtraProps>\n\nexport type BumpLineTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = FunctionComponent<{\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}>\n\nexport type BumpPointTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = FunctionComponent<{\n    point: BumpPoint<Datum, ExtraProps>\n}>\n\nexport interface BumpCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    margin?: Box\n    interpolation: BumpInterpolation\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n    theme?: PartialTheme\n    colors: OrdinalColorScaleConfig<BumpSerie<Datum, ExtraProps>>\n    lineWidth: number\n    activeLineWidth: number\n    inactiveLineWidth: number\n    opacity: number\n    activeOpacity: number\n    inactiveOpacity: number\n    startLabel: BumpLabel<Datum, ExtraProps>\n    startLabelPadding: number\n    startLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    endLabel: BumpLabel<Datum, ExtraProps>\n    endLabelPadding: number\n    endLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    pointSize: number\n    activePointSize: number\n    inactivePointSize: number\n    pointColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'color' | 'borderColor'>>\n    pointBorderWidth: number\n    activePointBorderWidth: number\n    inactivePointBorderWidth: number\n    pointBorderColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'borderColor'>>\n    enableGridX: boolean\n    enableGridY: boolean\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisTop?: AxisProps | null\n    isInteractive: boolean\n    defaultActiveSerieIds: string[]\n    lineTooltip: BumpLineTooltip<Datum, ExtraProps>\n    pointTooltip: BumpPointTooltip<Datum, ExtraProps>\n    role: string\n    layers: BumpLayer<Datum, ExtraProps>[]\n    renderWrapper: boolean\n    useMesh?: boolean\n    debugMesh: boolean\n}\n\nexport const isBumpPoint = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>(\n    point: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): point is BumpPoint<Datum, ExtraProps> => {\n    return 'serie' in point\n}\n\nexport const isComputedBumpSerie = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n>(\n    serie: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): serie is BumpComputedSerie<Datum, ExtraProps> => {\n    return 'points' in serie\n}\n\ninterface BumpPointMouseHandlersProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> {\n    useMesh: true\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpPointMouseHandler<Datum, ExtraProps>\n}\n\ninterface BumpSeriesMouseHandlersProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> {\n    useMesh?: false\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseDown?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseUp?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onDoubleClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n}\n\ninterface BumpSvgExtraProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport type BumpSvgPropsWithSeriesMouseHandlers<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = Dimensions &\n    BumpDataProps<Datum, ExtraProps> &\n    Partial<BumpCommonProps<Datum, ExtraProps>> &\n    BumpSeriesMouseHandlersProps<Datum, ExtraProps> &\n    Partial<BumpSvgExtraProps<Datum, ExtraProps>> &\n    MotionProps\n\nexport type BumpSvgPropsWithPointMouseHandlers<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = Dimensions &\n    BumpDataProps<Datum, ExtraProps> &\n    Partial<BumpCommonProps<Datum, ExtraProps>> &\n    BumpPointMouseHandlersProps<Datum, ExtraProps> &\n    Partial<BumpSvgExtraProps<Datum, ExtraProps>> &\n    MotionProps\n\nexport type BumpSvgProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, unknown>,\n> =\n    | BumpSvgPropsWithSeriesMouseHandlers<Datum, ExtraProps>\n    | BumpSvgPropsWithPointMouseHandlers<Datum, ExtraProps>\n\nexport type BumpSvgPropsWithDefaults<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps,\n> = Dimensions &\n    BumpDataProps<Datum, ExtraProps> &\n    BumpCommonProps<Datum, ExtraProps> &\n    (\n        | BumpSeriesMouseHandlersProps<Datum, ExtraProps>\n        | BumpPointMouseHandlersProps<Datum, ExtraProps>\n    ) &\n    BumpSvgExtraProps<Datum, ExtraProps> &\n    MotionProps\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/theming'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>,\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter?.(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove?.(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave?.(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick?.(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { Text } from '@nivo/text'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <Text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </Text>\n                )\n            })}\n        </>\n    )\n}\n","import { MotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n    layers: ['grid', 'axes', 'labels', 'areas'],\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n    startLabel: true,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: MotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement, forwardRef, Ref, ReactElement } from 'react'\nimport {\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n    WithChartRef,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps,\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n    width,\n    height,\n    margin: partialMargin,\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n    forwardedRef,\n}: InnerAreaBumpProps<Datum, ExtraProps> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = forwardRef(\n    <\n        Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n        ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>,\n    >(\n        {\n            isInteractive = areaBumpSvgDefaultProps.isInteractive,\n            animate = areaBumpSvgDefaultProps.animate,\n            motionConfig = areaBumpSvgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: AreaBumpSvgProps<Datum, ExtraProps>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            {...{\n                animate,\n                isInteractive,\n                motionConfig,\n                renderWrapper,\n                theme,\n            }}\n        >\n            <InnerAreaBump<Datum, ExtraProps>\n                isInteractive={isInteractive}\n                {...props}\n                forwardedRef={ref}\n            />\n        </Container>\n    )\n) as <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>,\n>(\n    props: WithChartRef<AreaBumpSvgProps<Datum, ExtraProps>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = forwardRef(\n    <\n        Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n        ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>,\n    >(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<AreaBumpSvgProps<Datum, ExtraProps>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>,\n>(\n    props: WithChartRef<ResponsiveProps<AreaBumpSvgProps<Datum, ExtraProps>>, SVGSVGElement>\n) => ReactElement | null\n"],"names":["useSerieDerivedProp","instruction","useMemo","useBump","_ref3","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","_useState","useState","activeSerieIds","setActiveSerieIds","_useState2","activePointIds","setActivePointIds","_useMemo","_ref","xValuesSet","Set","yValuesSet","forEach","serie","datum","add","x","y","xValues","Array","from","xScale","castPointScale","scalePoint","domain","range","padding","yValues","sort","a","b","yScale","linePointPadding","step","Math","min","series","map","rawSerie","id","points","linePoints","i","point","push","length","filter","computeSeries","rawSeries","lineGenerator","d3Line","curve","curveBasis","curveLinear","defined","d","useLineGenerator","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","includes","useSerieStyle","_extends","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","_ref2","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","usePointStyle","pts","rawPoint","isActive","isInactive","borderColor","useBumpSerieHandlers","_ref4","onMouseEnter","onMouseMove","onMouseLeave","onMouseDown","onMouseUp","onClick","onDoubleClick","tooltip","lineTooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleMouseDown","handleMouseUp","handleClick","handleDoubleClick","undefined","useBumpPointHandlers","_ref5","pointTooltip","_useTooltip2","useBumpSeriesLabels","_ref6","position","getLabel","textAnchor","signedPadding","labels","label","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","_jsx","BasicTooltip","enableChip","memo","_jsxs","children","useMesh","debugMesh","role","renderWrapper","pointComponent","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","animated","circle","cx","cy","r","to","v","max","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","linePath","animatedPath","useAnimatedPath","_Fragment","path","strokeLinecap","strokeOpacity","LinesLabels","springs","useSprings","index","Text","dominantBaseline","text","Mesh","margin","debug","showTooltipAt","_point$y","left","top","_point$y2","BaseMesh","nodes","InnerBump","partialMargin","_ref$layers","_ref$interpolation","_ref$xPadding","_ref$xOuterPadding","_ref$yOuterPadding","_ref$colors","_ref$lineWidth","_ref$activeLineWidth","_ref$inactiveLineWidt","_ref$opacity","_ref$activeOpacity","_ref$inactiveOpacity","_ref$startLabel","_ref$startLabelPaddin","_ref$startLabelTextCo","_ref$endLabel","_ref$endLabelPadding","_ref$endLabelTextColo","_ref$pointComponent","_ref$pointSize","_ref$activePointSize","_ref$inactivePointSiz","_ref$pointColor","_ref$pointBorderWidth","_ref$activePointBorde","_ref$inactivePointBor","_ref$pointBorderColor","_ref$enableGridX","_ref$enableGridY","_ref$axisTop","_ref$axisBottom","_ref$axisLeft","_ref$isInteractive","_ref$defaultActiveSer","_ref$useMesh","_ref$debugMesh","_ref$lineTooltip","_ref$pointTooltip","_ref$role","forwardedRef","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useBump","layerById","grid","axes","lines","mesh","Grid","Axes","right","bottom","Fragment","key","customLayerProps","SvgWrapper","ref","layer","_layerById$layer","Bump","forwardRef","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveBump","defaultWidth","defaultHeight","onResize","debounceResize","props","ResponsiveWrapper","isBumpPoint","isComputedBumpSerie","useAreaBumpSeries","align","spacing","maxSum","maxValues","slices","Map","has","set","total","values","slice","get","serieId","value","beforeHeight","keys","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","all","previousValues","_i","pos","beforeValue","reduce","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBump","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","_useAreaBumpSeries","areaGenerator","d3Area","useAreaGenerator","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","useAreaBumpSerieHandlers","useAreaBumpSeriesLabels","Area","blendMode","mixBlendMode","AreasLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","_ref$align","_ref$spacing","_ref$blendMode","_ref$fillOpacity","_ref$activeFillOpacit","_ref$inactiveFillOpac","_ref$defs","_ref$fill","_ref$borderWidth","_ref$activeBorderWidt","_ref$inactiveBorderWi","_ref$borderColor","_ref$borderOpacity","_ref$activeBorderOpac","_ref$inactiveBorderOp","_ref$tooltip","_useAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","ResponsiveAreaBump"],"mappings":"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"}