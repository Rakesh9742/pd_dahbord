{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2020r\\\\dashboard\\\\frontend\\\\src\\\\components\\\\FluidSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport './FluidSimulation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FluidSimulation = ({\n  width = 800,\n  height = 600,\n  intensity = 0.5,\n  speed = 1.0,\n  color = '#4a90e2',\n  interactive = true\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const mouseRef = useRef({\n    x: 0,\n    y: 0\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create fluid particles\n    const particleCount = 1000;\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n\n    // Parse color\n    const colorObj = new THREE.Color(color);\n    for (let i = 0; i < particleCount; i++) {\n      // Random positions in a sphere\n      const radius = Math.random() * 3;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(Math.random() * 2 - 1);\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i * 3 + 2] = radius * Math.cos(phi);\n\n      // Random velocities\n      velocities[i * 3] = (Math.random() - 0.5) * 0.02;\n      velocities[i * 3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.02;\n\n      // Colors with variation\n      const colorVariation = 0.3;\n      colors[i * 3] = colorObj.r + (Math.random() - 0.5) * colorVariation;\n      colors[i * 3 + 1] = colorObj.g + (Math.random() - 0.5) * colorVariation;\n      colors[i * 3 + 2] = colorObj.b + (Math.random() - 0.5) * colorVariation;\n    }\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    // Shader material for fluid effect\n    const fluidMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        },\n        intensity: {\n          value: intensity\n        },\n        speed: {\n          value: speed\n        }\n      },\n      vertexShader: `\n        attribute vec3 color;\n        varying vec3 vColor;\n        varying float vAlpha;\n        uniform float time;\n        uniform float intensity;\n        uniform float speed;\n        \n        void main() {\n          vColor = color;\n          \n          // Create fluid motion\n          vec3 pos = position;\n          float t = time * speed;\n          \n          // Add wave motion\n          pos.x += sin(t + position.y * 0.5) * 0.1 * intensity;\n          pos.y += cos(t + position.z * 0.5) * 0.1 * intensity;\n          pos.z += sin(t + position.x * 0.5) * 0.1 * intensity;\n          \n          // Calculate alpha based on distance from center\n          float dist = length(pos);\n          vAlpha = 1.0 - smoothstep(0.0, 3.0, dist);\n          \n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          gl_PointSize = 3.0 * vAlpha;\n        }\n      `,\n      fragmentShader: `\n        varying vec3 vColor;\n        varying float vAlpha;\n        \n        void main() {\n          float dist = length(gl_PointCoord - vec2(0.5));\n          float alpha = smoothstep(0.5, 0.0, dist) * vAlpha;\n          gl_FragColor = vec4(vColor, alpha);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n    const fluidParticles = new THREE.Points(particles, fluidMaterial);\n    scene.add(fluidParticles);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\n    scene.add(ambientLight);\n\n    // Mouse interaction\n    const handleMouseMove = event => {\n      if (!interactive) return;\n      const rect = renderer.domElement.getBoundingClientRect();\n      mouseRef.current.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n    };\n    if (interactive) {\n      renderer.domElement.addEventListener('mousemove', handleMouseMove);\n    }\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n      const time = Date.now() * 0.001;\n      fluidMaterial.uniforms.time.value = time;\n\n      // Update particle positions based on mouse\n      if (interactive) {\n        const positions = particles.attributes.position.array;\n        const velocities = new Float32Array(particleCount * 3);\n        for (let i = 0; i < particleCount; i++) {\n          const ix = i * 3;\n          const iy = i * 3 + 1;\n          const iz = i * 3 + 2;\n\n          // Add mouse attraction\n          const mouseInfluence = 0.1;\n          const dx = mouseRef.current.x * 3 - positions[ix];\n          const dy = mouseRef.current.y * 3 - positions[iy];\n          const dz = 0 - positions[iz];\n          positions[ix] += dx * mouseInfluence * 0.01;\n          positions[iy] += dy * mouseInfluence * 0.01;\n          positions[iz] += dz * mouseInfluence * 0.01;\n\n          // Add some random movement\n          positions[ix] += (Math.random() - 0.5) * 0.01;\n          positions[iy] += (Math.random() - 0.5) * 0.01;\n          positions[iz] += (Math.random() - 0.5) * 0.01;\n\n          // Keep particles within bounds\n          const dist = Math.sqrt(positions[ix] ** 2 + positions[iy] ** 2 + positions[iz] ** 2);\n          if (dist > 3) {\n            const scale = 3 / dist;\n            positions[ix] *= scale;\n            positions[iy] *= scale;\n            positions[iz] *= scale;\n          }\n        }\n        particles.attributes.position.needsUpdate = true;\n      }\n\n      // Rotate camera slightly\n      camera.position.x = Math.sin(time * 0.1) * 2;\n      camera.position.z = Math.cos(time * 0.1) * 2 + 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n    animate();\n    setIsInitialized(true);\n\n    // Cleanup\n    return () => {\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (renderer.domElement && interactive) {\n        renderer.domElement.removeEventListener('mousemove', handleMouseMove);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [width, height, intensity, speed, color, interactive]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fluid-simulation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"fluid-simulation\",\n      style: {\n        width,\n        height\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), !isInitialized && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fluid-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Initializing Fluid Simulation...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(FluidSimulation, \"aAv1NKlzyByTaX18vUcz3D/XeC4=\");\n_c = FluidSimulation;\nexport default FluidSimulation;\nvar _c;\n$RefreshReg$(_c, \"FluidSimulation\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","jsxDEV","_jsxDEV","FluidSimulation","width","height","intensity","speed","color","interactive","_s","mountRef","sceneRef","rendererRef","animationIdRef","mouseRef","x","y","isInitialized","setIsInitialized","current","scene","Scene","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","powerPreference","setSize","setClearColor","setPixelRatio","Math","min","window","devicePixelRatio","appendChild","domElement","particleCount","particles","BufferGeometry","positions","Float32Array","velocities","colors","colorObj","Color","i","radius","random","theta","PI","phi","acos","sin","cos","colorVariation","r","g","b","setAttribute","BufferAttribute","fluidMaterial","ShaderMaterial","uniforms","time","value","vertexShader","fragmentShader","transparent","blending","AdditiveBlending","depthWrite","fluidParticles","Points","add","ambientLight","AmbientLight","handleMouseMove","event","rect","getBoundingClientRect","clientX","left","clientY","top","addEventListener","animate","requestAnimationFrame","Date","now","attributes","array","ix","iy","iz","mouseInfluence","dx","dy","dz","dist","sqrt","scale","needsUpdate","lookAt","render","cancelAnimationFrame","removeEventListener","removeChild","dispose","className","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/2020r/dashboard/frontend/src/components/FluidSimulation.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport './FluidSimulation.css';\r\n\r\nconst FluidSimulation = ({ \r\n  width = 800, \r\n  height = 600, \r\n  intensity = 0.5, \r\n  speed = 1.0,\r\n  color = '#4a90e2',\r\n  interactive = true \r\n}) => {\r\n  const mountRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const animationIdRef = useRef(null);\r\n  const mouseRef = useRef({ x: 0, y: 0 });\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    sceneRef.current = scene;\r\n\r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.z = 5;\r\n\r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      antialias: true, \r\n      alpha: true,\r\n      powerPreference: \"high-performance\"\r\n    });\r\n    renderer.setSize(width, height);\r\n    renderer.setClearColor(0x000000, 0);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    rendererRef.current = renderer;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create fluid particles\r\n    const particleCount = 1000;\r\n    const particles = new THREE.BufferGeometry();\r\n    const positions = new Float32Array(particleCount * 3);\r\n    const velocities = new Float32Array(particleCount * 3);\r\n    const colors = new Float32Array(particleCount * 3);\r\n\r\n    // Parse color\r\n    const colorObj = new THREE.Color(color);\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n      // Random positions in a sphere\r\n      const radius = Math.random() * 3;\r\n      const theta = Math.random() * Math.PI * 2;\r\n      const phi = Math.acos(Math.random() * 2 - 1);\r\n\r\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\r\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\r\n      positions[i * 3 + 2] = radius * Math.cos(phi);\r\n\r\n      // Random velocities\r\n      velocities[i * 3] = (Math.random() - 0.5) * 0.02;\r\n      velocities[i * 3 + 1] = (Math.random() - 0.5) * 0.02;\r\n      velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.02;\r\n\r\n      // Colors with variation\r\n      const colorVariation = 0.3;\r\n      colors[i * 3] = colorObj.r + (Math.random() - 0.5) * colorVariation;\r\n      colors[i * 3 + 1] = colorObj.g + (Math.random() - 0.5) * colorVariation;\r\n      colors[i * 3 + 2] = colorObj.b + (Math.random() - 0.5) * colorVariation;\r\n    }\r\n\r\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n\r\n    // Shader material for fluid effect\r\n    const fluidMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        time: { value: 0 },\r\n        intensity: { value: intensity },\r\n        speed: { value: speed }\r\n      },\r\n      vertexShader: `\r\n        attribute vec3 color;\r\n        varying vec3 vColor;\r\n        varying float vAlpha;\r\n        uniform float time;\r\n        uniform float intensity;\r\n        uniform float speed;\r\n        \r\n        void main() {\r\n          vColor = color;\r\n          \r\n          // Create fluid motion\r\n          vec3 pos = position;\r\n          float t = time * speed;\r\n          \r\n          // Add wave motion\r\n          pos.x += sin(t + position.y * 0.5) * 0.1 * intensity;\r\n          pos.y += cos(t + position.z * 0.5) * 0.1 * intensity;\r\n          pos.z += sin(t + position.x * 0.5) * 0.1 * intensity;\r\n          \r\n          // Calculate alpha based on distance from center\r\n          float dist = length(pos);\r\n          vAlpha = 1.0 - smoothstep(0.0, 3.0, dist);\r\n          \r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\r\n          gl_PointSize = 3.0 * vAlpha;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vColor;\r\n        varying float vAlpha;\r\n        \r\n        void main() {\r\n          float dist = length(gl_PointCoord - vec2(0.5));\r\n          float alpha = smoothstep(0.5, 0.0, dist) * vAlpha;\r\n          gl_FragColor = vec4(vColor, alpha);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false\r\n    });\r\n\r\n    const fluidParticles = new THREE.Points(particles, fluidMaterial);\r\n    scene.add(fluidParticles);\r\n\r\n    // Add ambient light\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    // Mouse interaction\r\n    const handleMouseMove = (event) => {\r\n      if (!interactive) return;\r\n      \r\n      const rect = renderer.domElement.getBoundingClientRect();\r\n      mouseRef.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n      mouseRef.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n    };\r\n\r\n    if (interactive) {\r\n      renderer.domElement.addEventListener('mousemove', handleMouseMove);\r\n    }\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      animationIdRef.current = requestAnimationFrame(animate);\r\n\r\n      const time = Date.now() * 0.001;\r\n      fluidMaterial.uniforms.time.value = time;\r\n\r\n      // Update particle positions based on mouse\r\n      if (interactive) {\r\n        const positions = particles.attributes.position.array;\r\n        const velocities = new Float32Array(particleCount * 3);\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n          const ix = i * 3;\r\n          const iy = i * 3 + 1;\r\n          const iz = i * 3 + 2;\r\n\r\n          // Add mouse attraction\r\n          const mouseInfluence = 0.1;\r\n          const dx = mouseRef.current.x * 3 - positions[ix];\r\n          const dy = mouseRef.current.y * 3 - positions[iy];\r\n          const dz = 0 - positions[iz];\r\n          \r\n          positions[ix] += dx * mouseInfluence * 0.01;\r\n          positions[iy] += dy * mouseInfluence * 0.01;\r\n          positions[iz] += dz * mouseInfluence * 0.01;\r\n\r\n          // Add some random movement\r\n          positions[ix] += (Math.random() - 0.5) * 0.01;\r\n          positions[iy] += (Math.random() - 0.5) * 0.01;\r\n          positions[iz] += (Math.random() - 0.5) * 0.01;\r\n\r\n          // Keep particles within bounds\r\n          const dist = Math.sqrt(positions[ix] ** 2 + positions[iy] ** 2 + positions[iz] ** 2);\r\n          if (dist > 3) {\r\n            const scale = 3 / dist;\r\n            positions[ix] *= scale;\r\n            positions[iy] *= scale;\r\n            positions[iz] *= scale;\r\n          }\r\n        }\r\n        \r\n        particles.attributes.position.needsUpdate = true;\r\n      }\r\n\r\n      // Rotate camera slightly\r\n      camera.position.x = Math.sin(time * 0.1) * 2;\r\n      camera.position.z = Math.cos(time * 0.1) * 2 + 5;\r\n      camera.lookAt(0, 0, 0);\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n    setIsInitialized(true);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (animationIdRef.current) {\r\n        cancelAnimationFrame(animationIdRef.current);\r\n      }\r\n      if (renderer.domElement && interactive) {\r\n        renderer.domElement.removeEventListener('mousemove', handleMouseMove);\r\n      }\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, [width, height, intensity, speed, color, interactive]);\r\n\r\n  return (\r\n    <div className=\"fluid-simulation-container\">\r\n      <div \r\n        ref={mountRef} \r\n        className=\"fluid-simulation\"\r\n        style={{ width, height }}\r\n      />\r\n      {!isInitialized && (\r\n        <div className=\"fluid-loading\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Initializing Fluid Simulation...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FluidSimulation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}