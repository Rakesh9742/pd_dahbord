{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2020r\\\\dashboard\\\\frontend\\\\src\\\\components\\\\DuplicateErrorLogsMenu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './DuplicateErrorLogsMenu.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogsMenu = () => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedFile, setSelectedFile] = useState(null);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchLogs = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const response = await fetch('http://localhost:5000/api/data/logs', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        if (!response.ok) throw new Error(data.error || 'Failed to fetch logs');\n        setLogs(data.errors);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLogs();\n  }, [token]);\n\n  // Extract file names from logs\n  const files = Array.from(new Set(logs.map(log => {\n    const match = log.match(/\\[(.*?)\\] \\[(.*?)\\]/);\n    return match ? match[2] : null;\n  }).filter(Boolean)));\n  const filteredLogs = selectedFile ? logs.filter(log => log.includes(`[${selectedFile}]`)) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"duplicate-error-logs-menu\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading logs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), !loading && files.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No logs found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 42\n    }, this), !loading && files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logs-files-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select a file to view errors:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"files-list\",\n        children: files.map((file, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: selectedFile === file ? 'selected' : '',\n          style: {\n            color: 'red',\n            cursor: 'pointer',\n            fontWeight: 'bold'\n          },\n          onClick: () => setSelectedFile(file),\n          children: file\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logs-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Logs for \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red'\n          },\n          children: selectedFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }, this), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"logs-list\",\n        children: filteredLogs.map((log, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            color: 'red'\n          },\n          children: log\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(LogsMenu, \"ub24ArPYZRcGrzJ0U8wI9A0rwCk=\");\n_c = LogsMenu;\nexport default LogsMenu;\nvar _c;\n$RefreshReg$(_c, \"LogsMenu\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LogsMenu","_s","logs","setLogs","loading","setLoading","error","setError","selectedFile","setSelectedFile","token","localStorage","getItem","fetchLogs","response","fetch","headers","data","json","ok","Error","errors","err","message","files","Array","from","Set","map","log","match","filter","Boolean","filteredLogs","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","file","idx","style","color","cursor","fontWeight","onClick","_c","$RefreshReg$"],"sources":["C:/Users/2020r/dashboard/frontend/src/components/DuplicateErrorLogsMenu.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './DuplicateErrorLogsMenu.css';\r\n\r\nconst LogsMenu = () => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      setLoading(true);\r\n      setError('');\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/data/logs', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        const data = await response.json();\r\n        if (!response.ok) throw new Error(data.error || 'Failed to fetch logs');\r\n        setLogs(data.errors);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchLogs();\r\n  }, [token]);\r\n\r\n  // Extract file names from logs\r\n  const files = Array.from(new Set(logs.map(log => {\r\n    const match = log.match(/\\[(.*?)\\] \\[(.*?)\\]/);\r\n    return match ? match[2] : null;\r\n  }).filter(Boolean)));\r\n\r\n  const filteredLogs = selectedFile\r\n    ? logs.filter(log => log.includes(`[${selectedFile}]`))\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"duplicate-error-logs-menu\">\r\n      <h2>Logs</h2>\r\n      {loading && <div>Loading logs...</div>}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {!loading && files.length === 0 && <div>No logs found.</div>}\r\n      {!loading && files.length > 0 && (\r\n        <div className=\"logs-files-list\">\r\n          <h3>Select a file to view errors:</h3>\r\n          <ul className=\"files-list\">\r\n            {files.map((file, idx) => (\r\n              <li\r\n                key={idx}\r\n                className={selectedFile === file ? 'selected' : ''}\r\n                style={{ color: 'red', cursor: 'pointer', fontWeight: 'bold' }}\r\n                onClick={() => setSelectedFile(file)}\r\n              >\r\n                {file}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {selectedFile && (\r\n        <div className=\"logs-list-container\">\r\n          <h4>Logs for <span style={{ color: 'red' }}>{selectedFile}</span>:</h4>\r\n          <ul className=\"logs-list\">\r\n            {filteredLogs.map((log, idx) => (\r\n              <li key={idx} style={{ color: 'red' }}>{log}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogsMenu;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3ChB,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BR,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,EAAE,CAAC;MACZ,IAAI;QACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUN,KAAK,EAAE;YAClC,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF,MAAMO,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACX,KAAK,IAAI,sBAAsB,CAAC;QACvEH,OAAO,CAACc,IAAI,CAACI,MAAM,CAAC;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRlB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMc,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACzB,IAAI,CAAC0B,GAAG,CAACC,GAAG,IAAI;IAC/C,MAAMC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAAC,qBAAqB,CAAC;IAC9C,OAAOA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;EAChC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;EAEpB,MAAMC,YAAY,GAAGzB,YAAY,GAC7BN,IAAI,CAAC6B,MAAM,CAACF,GAAG,IAAIA,GAAG,CAACK,QAAQ,CAAC,IAAI1B,YAAY,GAAG,CAAC,CAAC,GACrD,EAAE;EAEN,oBACET,OAAA;IAAKoC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCrC,OAAA;MAAAqC,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACZpC,OAAO,iBAAIL,OAAA;MAAAqC,QAAA,EAAK;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACrClC,KAAK,iBAAIP,OAAA;MAAKoC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE9B;IAAK;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACrD,CAACpC,OAAO,IAAIoB,KAAK,CAACiB,MAAM,KAAK,CAAC,iBAAI1C,OAAA;MAAAqC,QAAA,EAAK;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC3D,CAACpC,OAAO,IAAIoB,KAAK,CAACiB,MAAM,GAAG,CAAC,iBAC3B1C,OAAA;MAAKoC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BrC,OAAA;QAAAqC,QAAA,EAAI;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtCzC,OAAA;QAAIoC,SAAS,EAAC,YAAY;QAAAC,QAAA,EACvBZ,KAAK,CAACI,GAAG,CAAC,CAACc,IAAI,EAAEC,GAAG,kBACnB5C,OAAA;UAEEoC,SAAS,EAAE3B,YAAY,KAAKkC,IAAI,GAAG,UAAU,GAAG,EAAG;UACnDE,KAAK,EAAE;YAAEC,KAAK,EAAE,KAAK;YAAEC,MAAM,EAAE,SAAS;YAAEC,UAAU,EAAE;UAAO,CAAE;UAC/DC,OAAO,EAAEA,CAAA,KAAMvC,eAAe,CAACiC,IAAI,CAAE;UAAAN,QAAA,EAEpCM;QAAI,GALAC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMN,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,EACAhC,YAAY,iBACXT,OAAA;MAAKoC,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCrC,OAAA;QAAAqC,QAAA,GAAI,WAAS,eAAArC,OAAA;UAAM6C,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAM,CAAE;UAAAT,QAAA,EAAE5B;QAAY;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvEzC,OAAA;QAAIoC,SAAS,EAAC,WAAW;QAAAC,QAAA,EACtBH,YAAY,CAACL,GAAG,CAAC,CAACC,GAAG,EAAEc,GAAG,kBACzB5C,OAAA;UAAc6C,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAM,CAAE;UAAAT,QAAA,EAAEP;QAAG,GAAlCc,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoC,CACjD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvC,EAAA,CA3EID,QAAQ;AAAAiD,EAAA,GAARjD,QAAQ;AA6Ed,eAAeA,QAAQ;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}