{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2020r\\\\dashboard\\\\frontend\\\\src\\\\components\\\\ChatView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, ScatterChart, Scatter, LineChart, Line, ZAxis, AreaChart, Area, ComposedChart } from 'recharts';\nimport './ChatView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUS_COLORS = {\n  pass: '#00ff88',\n  fail: '#ff4757',\n  continue_with_error: '#ffa502',\n  unknown: '#8884d8'\n};\nconst METRIC_COLORS = {\n  area: '#00d2ff',\n  internal_timing: '#ff6b6b',\n  utilization: '#4ecdc4',\n  interface_timing: '#45b7d1',\n  congestion: '#96ceb4',\n  runtime: '#ffa726',\n  avg_runtime: '#ab47bc'\n};\nfunction getRuntimeMinutes(str) {\n  if (!str || typeof str !== 'string' || !str.includes(':')) return 0;\n  const [h, m] = str.split(':').map(Number);\n  return (isNaN(h) ? 0 : h) * 60 + (isNaN(m) ? 0 : m);\n}\nconst ChatView = ({\n  data,\n  stats\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('stage');\n\n  // --- Enhanced Data Preparation ---\n  // 1. Stage-wise stacked bar (existing)\n  const stageStatusCounts = (() => {\n    const result = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const status = (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n      if (!result[stage]) result[stage] = {\n        stage,\n        pass: 0,\n        fail: 0,\n        continue_with_error: 0,\n        unknown: 0\n      };\n      if (result[stage][status] !== undefined) result[stage][status] += 1;else result[stage].unknown += 1;\n    });\n    return Object.values(result);\n  })();\n\n  // 2. Stage-wise metrics (NEW)\n  const stageMetrics = (() => {\n    const result = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      if (!result[stage]) {\n        result[stage] = {\n          stage,\n          area: [],\n          internal_timing: [],\n          utilization: [],\n          interface_timing: [],\n          congestion: [],\n          runtime: [],\n          count: 0\n        };\n      }\n\n      // Collect all values for averaging\n      if (row['Area(um2)']) result[stage].area.push(parseFloat(row['Area(um2)']));\n      if (row['internal_timing']) result[stage].internal_timing.push(parseFloat(row['internal_timing']));\n      if (row['utilization']) result[stage].utilization.push(parseFloat(row['utilization']));\n      if (row['interface_timing']) result[stage].interface_timing.push(parseFloat(row['interface_timing']));\n      if (row['congestion_drc_metrics']) result[stage].congestion.push(parseFloat(row['congestion_drc_metrics']));\n\n      // Runtime\n      const runtime = getRuntimeMinutes(row['runtime(hr:min)']);\n      if (runtime > 0) result[stage].runtime.push(runtime);\n      result[stage].count += 1;\n    });\n\n    // Calculate averages\n    return Object.values(result).map(stage => ({\n      ...stage,\n      avg_area: stage.area.length > 0 ? stage.area.reduce((a, b) => a + b, 0) / stage.area.length : 0,\n      avg_internal_timing: stage.internal_timing.length > 0 ? stage.internal_timing.reduce((a, b) => a + b, 0) / stage.internal_timing.length : 0,\n      avg_utilization: stage.utilization.length > 0 ? stage.utilization.reduce((a, b) => a + b, 0) / stage.utilization.length : 0,\n      avg_interface_timing: stage.interface_timing.length > 0 ? stage.interface_timing.reduce((a, b) => a + b, 0) / stage.interface_timing.length : 0,\n      avg_congestion: stage.congestion.length > 0 ? stage.congestion.reduce((a, b) => a + b, 0) / stage.congestion.length : 0,\n      avg_runtime: stage.runtime.length > 0 ? stage.runtime.reduce((a, b) => a + b, 0) / stage.runtime.length : 0,\n      max_area: stage.area.length > 0 ? Math.max(...stage.area) : 0,\n      max_runtime: stage.runtime.length > 0 ? Math.max(...stage.runtime) : 0\n    }));\n  })();\n\n  // 3. Stage-wise performance comparison (NEW)\n  const stagePerformance = stageMetrics.map(stage => ({\n    stage: stage.stage,\n    avg_runtime: stage.avg_runtime,\n    avg_area: stage.avg_area,\n    avg_utilization: stage.avg_utilization,\n    success_rate: stage.count > 0 ? data.filter(row => (row.stage || 'Unknown').trim() === stage.stage && (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase() === 'pass').length / stage.count * 100 : 0\n  }));\n\n  // 4. Area vs Runtime scatter (enhanced)\n  const scatterData = data.map(row => {\n    let runtime = 0;\n    if (row['runtime(hr:min)']) {\n      const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n      runtime = h * 60 + m;\n    }\n    return {\n      area: parseFloat(row['Area(um2)']) || 0,\n      runtime,\n      status: (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase(),\n      stage: (row.stage || 'Unknown').trim()\n    };\n  }).filter(d => d.area > 0 && d.runtime > 0);\n\n  // 5. Status pie (existing)\n  const statusCounts = data.reduce((acc, row) => {\n    const status = (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n    acc[status] = (acc[status] || 0) + 1;\n    return acc;\n  }, {});\n  const statusPieData = Object.entries(statusCounts).map(([name, value]) => ({\n    name,\n    value,\n    color: STATUS_COLORS[name] || '#8884d8'\n  }));\n\n  // 6. Time trend (enhanced)\n  const timeTrend = (() => {\n    const byDate = {};\n    data.forEach(row => {\n      let date = row['run end time'] || row['run_end_time'] || '';\n      if (date.includes('/')) {\n        const [d, m, y] = date.split('/');\n        date = `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\n      } else if (date.includes('-')) {\n        date = date.split('T')[0];\n      }\n      if (!byDate[date]) byDate[date] = {\n        date,\n        runs: 0,\n        avg_runtime: 0,\n        total_runtime: 0\n      };\n      byDate[date].runs += 1;\n      let runtime = 0;\n      if (row['runtime(hr:min)']) {\n        const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n        runtime = h * 60 + m;\n      }\n      byDate[date].total_runtime += runtime;\n    });\n    Object.values(byDate).forEach(d => {\n      d.avg_runtime = d.runs ? d.total_runtime / d.runs : 0;\n    });\n    return Object.values(byDate).sort((a, b) => a.date.localeCompare(b.date));\n  })();\n\n  // 7. Heatmap (enhanced)\n  const heatmapMatrix = (() => {\n    const stageSet = new Set();\n    const blockSet = new Set();\n    const cellMap = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const block = (row.block_name || row.block || 'Unknown').trim();\n      stageSet.add(stage);\n      blockSet.add(block);\n      const key = `${stage}|||${block}`;\n      if (!cellMap[key]) cellMap[key] = {\n        sum: 0,\n        count: 0\n      };\n      cellMap[key].sum += getRuntimeMinutes(row['runtime(hr:min)']);\n      cellMap[key].count += 1;\n    });\n    const stages = Array.from(stageSet);\n    const blocks = Array.from(blockSet);\n    const matrix = stages.map(stage => blocks.map(block => {\n      const key = `${stage}|||${block}`;\n      const cell = cellMap[key];\n      return cell && cell.count > 0 ? cell.sum / cell.count : null;\n    }));\n    let min = Infinity,\n      max = -Infinity;\n    matrix.forEach(row => row.forEach(val => {\n      if (val !== null) {\n        if (val < min) min = val;\n        if (val > max) max = val;\n      }\n    }));\n    return {\n      stages,\n      blocks,\n      matrix,\n      min,\n      max\n    };\n  })();\n  function getHeatColor(val, min, max) {\n    if (val === null) return '#eee';\n    const t = (val - min) / (max - min + 0.0001);\n    return `rgb(${Math.round(224 - t * 209)},${Math.round(247 - t * 232)},${Math.round(250 - t * 155)})`;\n  }\n\n  // --- Enhanced Chart Renderers ---\n  const renderStageBar = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: stageStatusCounts,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"stage\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        allowDecimals: false,\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"pass\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.pass,\n        name: \"Pass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"fail\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.fail,\n        name: \"Fail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"continue_with_error\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.continue_with_error,\n        name: \"Continue with Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"unknown\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.unknown,\n        name: \"Unknown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n\n  // NEW: Stage-wise metrics chart\n  const renderStageMetrics = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(ComposedChart, {\n      data: stageMetrics,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"stage\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"avg_area\",\n        fill: METRIC_COLORS.area,\n        name: \"Avg Area (um\\xB2)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"avg_utilization\",\n        fill: METRIC_COLORS.utilization,\n        name: \"Avg Utilization (%)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"avg_runtime\",\n        stroke: METRIC_COLORS.runtime,\n        name: \"Avg Runtime (min)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n\n  // NEW: Stage performance comparison\n  const renderStagePerformance = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: stagePerformance,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"stage\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"success_rate\",\n        fill: \"#4ecdc4\",\n        name: \"Success Rate (%)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"avg_runtime\",\n        stroke: METRIC_COLORS.runtime,\n        name: \"Avg Runtime (min)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n\n  // NEW: Stage-wise timing analysis\n  const renderStageTiming = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(AreaChart, {\n      data: stageMetrics,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"stage\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"avg_internal_timing\",\n        stackId: \"1\",\n        stroke: METRIC_COLORS.internal_timing,\n        fill: METRIC_COLORS.internal_timing,\n        name: \"Internal Timing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"avg_interface_timing\",\n        stackId: \"1\",\n        stroke: METRIC_COLORS.interface_timing,\n        fill: METRIC_COLORS.interface_timing,\n        name: \"Interface Timing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"avg_congestion\",\n        stackId: \"1\",\n        stroke: METRIC_COLORS.congestion,\n        fill: METRIC_COLORS.congestion,\n        name: \"Congestion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n  const renderScatter = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"area\",\n        name: \"Area (um\\xB2)\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"runtime\",\n        name: \"Runtime (min)\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n        range: [100, 400]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        cursor: {\n          strokeDasharray: '3 3'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), Object.keys(STATUS_COLORS).map(status => /*#__PURE__*/_jsxDEV(Scatter, {\n        name: status.charAt(0).toUpperCase() + status.slice(1),\n        data: scatterData.filter(d => d.status === status),\n        fill: STATUS_COLORS[status]\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n  const renderPie = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(PieChart, {\n      children: [/*#__PURE__*/_jsxDEV(Pie, {\n        data: statusPieData,\n        dataKey: \"value\",\n        nameKey: \"name\",\n        cx: \"50%\",\n        cy: \"50%\",\n        outerRadius: 110,\n        label: ({\n          name,\n          percent\n        }) => `${name} ${(percent * 100).toFixed(0)}%`,\n        children: statusPieData.map((entry, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: entry.color,\n          stroke: \"#fff\",\n          strokeWidth: 2\n        }, `cell-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n  const renderTimeTrend = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: timeTrend,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        allowDecimals: false,\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"left\",\n        type: \"monotone\",\n        dataKey: \"runs\",\n        stroke: \"#00d2ff\",\n        name: \"Runs\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"avg_runtime\",\n        stroke: \"#ff6b6b\",\n        name: \"Avg Runtime (min)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n  const renderHeatmap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"heatmap-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-title\",\n      children: \"Stage vs Block Heatmap (Avg Runtime in min)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-grid\",\n      style: {\n        gridTemplateColumns: `120px repeat(${heatmapMatrix.blocks.length}, 1fr)`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-corner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), heatmapMatrix.blocks.map(block => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-header\",\n        children: block\n      }, block, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)), heatmapMatrix.stages.map((stage, i) => [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-header\",\n        children: stage\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), ...heatmapMatrix.matrix[i].map((val, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-cell\",\n        style: {\n          background: getHeatColor(val, heatmapMatrix.min, heatmapMatrix.max)\n        },\n        children: val !== null ? val.toFixed(1) : ''\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }, this))])]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [heatmapMatrix.min.toFixed(1), \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-legend-bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [heatmapMatrix.max.toFixed(1), \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n\n  // --- Main Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Engineering Data Analytics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'stage' ? 'active' : '',\n          onClick: () => setChartType('stage'),\n          children: \"Stage Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'metrics' ? 'active' : '',\n          onClick: () => setChartType('metrics'),\n          children: \"Stage Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'performance' ? 'active' : '',\n          onClick: () => setChartType('performance'),\n          children: \"Performance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'timing' ? 'active' : '',\n          onClick: () => setChartType('timing'),\n          children: \"Timing Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'scatter' ? 'active' : '',\n          onClick: () => setChartType('scatter'),\n          children: \"Area vs Runtime\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'pie' ? 'active' : '',\n          onClick: () => setChartType('pie'),\n          children: \"Status Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'trend' ? 'active' : '',\n          onClick: () => setChartType('trend'),\n          children: \"Time Trend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'heatmap' ? 'active' : '',\n          onClick: () => setChartType('heatmap'),\n          children: \"Stage vs Block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [chartType === 'stage' && renderStageBar(), chartType === 'metrics' && renderStageMetrics(), chartType === 'performance' && renderStagePerformance(), chartType === 'timing' && renderStageTiming(), chartType === 'scatter' && renderScatter(), chartType === 'pie' && renderPie(), chartType === 'trend' && renderTimeTrend(), chartType === 'heatmap' && renderHeatmap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatView, \"psFt8gF0OOgYkJNma6DeBAIEG8U=\");\n_c = ChatView;\nexport default ChatView;\nvar _c;\n$RefreshReg$(_c, \"ChatView\");","map":{"version":3,"names":["React","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","ScatterChart","Scatter","LineChart","Line","ZAxis","AreaChart","Area","ComposedChart","jsxDEV","_jsxDEV","STATUS_COLORS","pass","fail","continue_with_error","unknown","METRIC_COLORS","area","internal_timing","utilization","interface_timing","congestion","runtime","avg_runtime","getRuntimeMinutes","str","includes","h","m","split","map","Number","isNaN","ChatView","data","stats","_s","chartType","setChartType","stageStatusCounts","result","forEach","row","stage","trim","status","run_status","replace","toLowerCase","undefined","Object","values","stageMetrics","count","push","parseFloat","avg_area","length","reduce","a","b","avg_internal_timing","avg_utilization","avg_interface_timing","avg_congestion","max_area","Math","max","max_runtime","stagePerformance","success_rate","filter","scatterData","d","statusCounts","acc","statusPieData","entries","name","value","color","timeTrend","byDate","date","y","padStart","runs","total_runtime","sort","localeCompare","heatmapMatrix","stageSet","Set","blockSet","cellMap","block","block_name","add","key","sum","stages","Array","from","blocks","matrix","cell","min","Infinity","val","getHeatColor","t","round","renderStageBar","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","stroke","allowDecimals","stackId","fill","renderStageMetrics","yAxisId","orientation","type","strokeWidth","renderStagePerformance","renderStageTiming","renderScatter","range","cursor","keys","charAt","toUpperCase","slice","renderPie","nameKey","cx","cy","outerRadius","label","percent","toFixed","entry","idx","renderTimeTrend","renderHeatmap","className","style","gridTemplateColumns","i","j","background","onClick","_c","$RefreshReg$"],"sources":["C:/Users/2020r/dashboard/frontend/src/components/ChatView.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, ScatterChart, Scatter, LineChart, Line, ZAxis, AreaChart, Area, ComposedChart } from 'recharts';\r\nimport './ChatView.css';\r\n\r\nconst STATUS_COLORS = {\r\n  pass: '#00ff88',\r\n  fail: '#ff4757',\r\n  continue_with_error: '#ffa502',\r\n  unknown: '#8884d8',\r\n};\r\n\r\nconst METRIC_COLORS = {\r\n  area: '#00d2ff',\r\n  internal_timing: '#ff6b6b',\r\n  utilization: '#4ecdc4',\r\n  interface_timing: '#45b7d1',\r\n  congestion: '#96ceb4',\r\n  runtime: '#ffa726',\r\n  avg_runtime: '#ab47bc'\r\n};\r\n\r\nfunction getRuntimeMinutes(str) {\r\n  if (!str || typeof str !== 'string' || !str.includes(':')) return 0;\r\n  const [h, m] = str.split(':').map(Number);\r\n  return (isNaN(h) ? 0 : h) * 60 + (isNaN(m) ? 0 : m);\r\n}\r\n\r\nconst ChatView = ({ data, stats }) => {\r\n  const [chartType, setChartType] = useState('stage');\r\n\r\n  // --- Enhanced Data Preparation ---\r\n  // 1. Stage-wise stacked bar (existing)\r\n  const stageStatusCounts = (() => {\r\n    const result = {};\r\n    data.forEach(row => {\r\n      const stage = (row.stage || 'Unknown').trim();\r\n      const status = (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\r\n      if (!result[stage]) result[stage] = { stage, pass: 0, fail: 0, continue_with_error: 0, unknown: 0 };\r\n      if (result[stage][status] !== undefined) result[stage][status] += 1;\r\n      else result[stage].unknown += 1;\r\n    });\r\n    return Object.values(result);\r\n  })();\r\n\r\n  // 2. Stage-wise metrics (NEW)\r\n  const stageMetrics = (() => {\r\n    const result = {};\r\n    data.forEach(row => {\r\n      const stage = (row.stage || 'Unknown').trim();\r\n      if (!result[stage]) {\r\n        result[stage] = {\r\n          stage,\r\n          area: [],\r\n          internal_timing: [],\r\n          utilization: [],\r\n          interface_timing: [],\r\n          congestion: [],\r\n          runtime: [],\r\n          count: 0\r\n        };\r\n      }\r\n      \r\n      // Collect all values for averaging\r\n      if (row['Area(um2)']) result[stage].area.push(parseFloat(row['Area(um2)']));\r\n      if (row['internal_timing']) result[stage].internal_timing.push(parseFloat(row['internal_timing']));\r\n      if (row['utilization']) result[stage].utilization.push(parseFloat(row['utilization']));\r\n      if (row['interface_timing']) result[stage].interface_timing.push(parseFloat(row['interface_timing']));\r\n      if (row['congestion_drc_metrics']) result[stage].congestion.push(parseFloat(row['congestion_drc_metrics']));\r\n      \r\n      // Runtime\r\n      const runtime = getRuntimeMinutes(row['runtime(hr:min)']);\r\n      if (runtime > 0) result[stage].runtime.push(runtime);\r\n      \r\n      result[stage].count += 1;\r\n    });\r\n\r\n    // Calculate averages\r\n    return Object.values(result).map(stage => ({\r\n      ...stage,\r\n      avg_area: stage.area.length > 0 ? stage.area.reduce((a, b) => a + b, 0) / stage.area.length : 0,\r\n      avg_internal_timing: stage.internal_timing.length > 0 ? stage.internal_timing.reduce((a, b) => a + b, 0) / stage.internal_timing.length : 0,\r\n      avg_utilization: stage.utilization.length > 0 ? stage.utilization.reduce((a, b) => a + b, 0) / stage.utilization.length : 0,\r\n      avg_interface_timing: stage.interface_timing.length > 0 ? stage.interface_timing.reduce((a, b) => a + b, 0) / stage.interface_timing.length : 0,\r\n      avg_congestion: stage.congestion.length > 0 ? stage.congestion.reduce((a, b) => a + b, 0) / stage.congestion.length : 0,\r\n      avg_runtime: stage.runtime.length > 0 ? stage.runtime.reduce((a, b) => a + b, 0) / stage.runtime.length : 0,\r\n      max_area: stage.area.length > 0 ? Math.max(...stage.area) : 0,\r\n      max_runtime: stage.runtime.length > 0 ? Math.max(...stage.runtime) : 0\r\n    }));\r\n  })();\r\n\r\n  // 3. Stage-wise performance comparison (NEW)\r\n  const stagePerformance = stageMetrics.map(stage => ({\r\n    stage: stage.stage,\r\n    avg_runtime: stage.avg_runtime,\r\n    avg_area: stage.avg_area,\r\n    avg_utilization: stage.avg_utilization,\r\n    success_rate: stage.count > 0 ? \r\n      (data.filter(row => (row.stage || 'Unknown').trim() === stage.stage && \r\n        (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase() === 'pass').length / stage.count * 100) : 0\r\n  }));\r\n\r\n  // 4. Area vs Runtime scatter (enhanced)\r\n  const scatterData = data.map(row => {\r\n    let runtime = 0;\r\n    if (row['runtime(hr:min)']) {\r\n      const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\r\n      runtime = h * 60 + m;\r\n    }\r\n    return {\r\n      area: parseFloat(row['Area(um2)']) || 0,\r\n      runtime,\r\n      status: (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase(),\r\n      stage: (row.stage || 'Unknown').trim(),\r\n    };\r\n  }).filter(d => d.area > 0 && d.runtime > 0);\r\n\r\n  // 5. Status pie (existing)\r\n  const statusCounts = data.reduce((acc, row) => {\r\n    const status = (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\r\n    acc[status] = (acc[status] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n  const statusPieData = Object.entries(statusCounts).map(([name, value]) => ({ name, value, color: STATUS_COLORS[name] || '#8884d8' }));\r\n\r\n  // 6. Time trend (enhanced)\r\n  const timeTrend = (() => {\r\n    const byDate = {};\r\n    data.forEach(row => {\r\n      let date = row['run end time'] || row['run_end_time'] || '';\r\n      if (date.includes('/')) {\r\n        const [d, m, y] = date.split('/');\r\n        date = `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\r\n      } else if (date.includes('-')) {\r\n        date = date.split('T')[0];\r\n      }\r\n      if (!byDate[date]) byDate[date] = { date, runs: 0, avg_runtime: 0, total_runtime: 0 };\r\n      byDate[date].runs += 1;\r\n      \r\n      let runtime = 0;\r\n      if (row['runtime(hr:min)']) {\r\n        const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\r\n        runtime = h * 60 + m;\r\n      }\r\n      byDate[date].total_runtime += runtime;\r\n    });\r\n    Object.values(byDate).forEach(d => {\r\n      d.avg_runtime = d.runs ? d.total_runtime / d.runs : 0;\r\n    });\r\n    return Object.values(byDate).sort((a, b) => a.date.localeCompare(b.date));\r\n  })();\r\n\r\n  // 7. Heatmap (enhanced)\r\n  const heatmapMatrix = (() => {\r\n    const stageSet = new Set();\r\n    const blockSet = new Set();\r\n    const cellMap = {};\r\n    data.forEach(row => {\r\n      const stage = (row.stage || 'Unknown').trim();\r\n      const block = (row.block_name || row.block || 'Unknown').trim();\r\n      stageSet.add(stage);\r\n      blockSet.add(block);\r\n      const key = `${stage}|||${block}`;\r\n      if (!cellMap[key]) cellMap[key] = { sum: 0, count: 0 };\r\n      cellMap[key].sum += getRuntimeMinutes(row['runtime(hr:min)']);\r\n      cellMap[key].count += 1;\r\n    });\r\n    const stages = Array.from(stageSet);\r\n    const blocks = Array.from(blockSet);\r\n    const matrix = stages.map(stage =>\r\n      blocks.map(block => {\r\n        const key = `${stage}|||${block}`;\r\n        const cell = cellMap[key];\r\n        return cell && cell.count > 0 ? cell.sum / cell.count : null;\r\n      })\r\n    );\r\n    let min = Infinity, max = -Infinity;\r\n    matrix.forEach(row => row.forEach(val => {\r\n      if (val !== null) {\r\n        if (val < min) min = val;\r\n        if (val > max) max = val;\r\n      }\r\n    }));\r\n    return { stages, blocks, matrix, min, max };\r\n  })();\r\n\r\n  function getHeatColor(val, min, max) {\r\n    if (val === null) return '#eee';\r\n    const t = (val - min) / (max - min + 0.0001);\r\n    return `rgb(${Math.round(224 - t * 209)},${Math.round(247 - t * 232)},${Math.round(250 - t * 155)})`;\r\n  }\r\n\r\n  // --- Enhanced Chart Renderers ---\r\n  const renderStageBar = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <BarChart data={stageStatusCounts} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"stage\" stroke=\"#fff\" />\r\n        <YAxis allowDecimals={false} stroke=\"#fff\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"pass\" stackId=\"a\" fill={STATUS_COLORS.pass} name=\"Pass\" />\r\n        <Bar dataKey=\"fail\" stackId=\"a\" fill={STATUS_COLORS.fail} name=\"Fail\" />\r\n        <Bar dataKey=\"continue_with_error\" stackId=\"a\" fill={STATUS_COLORS.continue_with_error} name=\"Continue with Error\" />\r\n        <Bar dataKey=\"unknown\" stackId=\"a\" fill={STATUS_COLORS.unknown} name=\"Unknown\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  // NEW: Stage-wise metrics chart\r\n  const renderStageMetrics = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <ComposedChart data={stageMetrics} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"stage\" stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"left\" stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#fff\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar yAxisId=\"left\" dataKey=\"avg_area\" fill={METRIC_COLORS.area} name=\"Avg Area (um²)\" />\r\n        <Bar yAxisId=\"left\" dataKey=\"avg_utilization\" fill={METRIC_COLORS.utilization} name=\"Avg Utilization (%)\" />\r\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avg_runtime\" stroke={METRIC_COLORS.runtime} name=\"Avg Runtime (min)\" strokeWidth={3} />\r\n      </ComposedChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  // NEW: Stage performance comparison\r\n  const renderStagePerformance = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <BarChart data={stagePerformance} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"stage\" stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"left\" stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#fff\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar yAxisId=\"left\" dataKey=\"success_rate\" fill=\"#4ecdc4\" name=\"Success Rate (%)\" />\r\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avg_runtime\" stroke={METRIC_COLORS.runtime} name=\"Avg Runtime (min)\" strokeWidth={3} />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  // NEW: Stage-wise timing analysis\r\n  const renderStageTiming = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <AreaChart data={stageMetrics} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"stage\" stroke=\"#fff\" />\r\n        <YAxis stroke=\"#fff\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Area type=\"monotone\" dataKey=\"avg_internal_timing\" stackId=\"1\" stroke={METRIC_COLORS.internal_timing} fill={METRIC_COLORS.internal_timing} name=\"Internal Timing\" />\r\n        <Area type=\"monotone\" dataKey=\"avg_interface_timing\" stackId=\"1\" stroke={METRIC_COLORS.interface_timing} fill={METRIC_COLORS.interface_timing} name=\"Interface Timing\" />\r\n        <Area type=\"monotone\" dataKey=\"avg_congestion\" stackId=\"1\" stroke={METRIC_COLORS.congestion} fill={METRIC_COLORS.congestion} name=\"Congestion\" />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  const renderScatter = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <ScatterChart>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"area\" name=\"Area (um²)\" stroke=\"#fff\" />\r\n        <YAxis dataKey=\"runtime\" name=\"Runtime (min)\" stroke=\"#fff\" />\r\n        <ZAxis range={[100, 400]} />\r\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n        <Legend />\r\n        {Object.keys(STATUS_COLORS).map(status => (\r\n          <Scatter\r\n            key={status}\r\n            name={status.charAt(0).toUpperCase() + status.slice(1)}\r\n            data={scatterData.filter(d => d.status === status)}\r\n            fill={STATUS_COLORS[status]}\r\n          />\r\n        ))}\r\n      </ScatterChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  const renderPie = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <PieChart>\r\n        <Pie\r\n          data={statusPieData}\r\n          dataKey=\"value\"\r\n          nameKey=\"name\"\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          outerRadius={110}\r\n          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n        >\r\n          {statusPieData.map((entry, idx) => (\r\n            <Cell key={`cell-${idx}`} fill={entry.color} stroke=\"#fff\" strokeWidth={2} />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip />\r\n        <Legend />\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  const renderTimeTrend = () => (\r\n    <ResponsiveContainer width=\"100%\" height={340}>\r\n      <LineChart data={timeTrend} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"date\" stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"left\" allowDecimals={false} stroke=\"#fff\" />\r\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#fff\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"runs\" stroke=\"#00d2ff\" name=\"Runs\" strokeWidth={3} />\r\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avg_runtime\" stroke=\"#ff6b6b\" name=\"Avg Runtime (min)\" strokeWidth={3} />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n\r\n  const renderHeatmap = () => (\r\n    <div className=\"heatmap-container\">\r\n      <div className=\"heatmap-title\">Stage vs Block Heatmap (Avg Runtime in min)</div>\r\n      <div className=\"heatmap-grid\" style={{ gridTemplateColumns: `120px repeat(${heatmapMatrix.blocks.length}, 1fr)` }}>\r\n        <div className=\"heatmap-corner\"></div>\r\n        {heatmapMatrix.blocks.map(block => (\r\n          <div key={block} className=\"heatmap-header\">{block}</div>\r\n        ))}\r\n        {heatmapMatrix.stages.map((stage, i) => [\r\n          <div key={stage} className=\"heatmap-header\">{stage}</div>,\r\n          ...heatmapMatrix.matrix[i].map((val, j) => (\r\n            <div key={j} className=\"heatmap-cell\" style={{ background: getHeatColor(val, heatmapMatrix.min, heatmapMatrix.max) }}>\r\n              {val !== null ? val.toFixed(1) : ''}\r\n            </div>\r\n          ))\r\n        ])}\r\n      </div>\r\n      <div className=\"heatmap-legend\">\r\n        <span>{heatmapMatrix.min.toFixed(1)} min</span>\r\n        <div className=\"heatmap-legend-bar\"></div>\r\n        <span>{heatmapMatrix.max.toFixed(1)} min</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // --- Main Render ---\r\n  return (\r\n    <div className=\"chat-view\">\r\n      <div className=\"chat-header\">\r\n        <h3>📊 Engineering Data Analytics</h3>\r\n        <div className=\"chat-controls\">\r\n          <button className={chartType === 'stage' ? 'active' : ''} onClick={() => setChartType('stage')}>Stage Status</button>\r\n          <button className={chartType === 'metrics' ? 'active' : ''} onClick={() => setChartType('metrics')}>Stage Metrics</button>\r\n          <button className={chartType === 'performance' ? 'active' : ''} onClick={() => setChartType('performance')}>Performance</button>\r\n          <button className={chartType === 'timing' ? 'active' : ''} onClick={() => setChartType('timing')}>Timing Analysis</button>\r\n          <button className={chartType === 'scatter' ? 'active' : ''} onClick={() => setChartType('scatter')}>Area vs Runtime</button>\r\n          <button className={chartType === 'pie' ? 'active' : ''} onClick={() => setChartType('pie')}>Status Distribution</button>\r\n          <button className={chartType === 'trend' ? 'active' : ''} onClick={() => setChartType('trend')}>Time Trend</button>\r\n          <button className={chartType === 'heatmap' ? 'active' : ''} onClick={() => setChartType('heatmap')}>Stage vs Block</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat-content\">\r\n        <div className=\"chart-section\">\r\n          {chartType === 'stage' && renderStageBar()}\r\n          {chartType === 'metrics' && renderStageMetrics()}\r\n          {chartType === 'performance' && renderStagePerformance()}\r\n          {chartType === 'timing' && renderStageTiming()}\r\n          {chartType === 'scatter' && renderScatter()}\r\n          {chartType === 'pie' && renderPie()}\r\n          {chartType === 'trend' && renderTimeTrend()}\r\n          {chartType === 'heatmap' && renderHeatmap()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}