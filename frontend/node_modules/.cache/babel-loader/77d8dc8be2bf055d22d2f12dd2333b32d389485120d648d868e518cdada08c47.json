{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2020r\\\\dashboard\\\\frontend\\\\src\\\\components\\\\ChatView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, ScatterChart, Scatter, LineChart, Line, ZAxis } from 'recharts';\nimport './ChatView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUS_COLORS = {\n  pass: '#00ff88',\n  fail: '#ff4757',\n  continue_with_error: '#ffa502',\n  unknown: '#8884d8'\n};\nfunction getRuntimeMinutes(str) {\n  if (!str || typeof str !== 'string' || !str.includes(':')) return 0;\n  const [h, m] = str.split(':').map(Number);\n  return (isNaN(h) ? 0 : h) * 60 + (isNaN(m) ? 0 : m);\n}\nconst ChatView = ({\n  data,\n  stats\n}) => {\n  _s();\n  const [chartType, setChartType] = useState('stage');\n\n  // --- Data Preparation ---\n  // 1. Stage-wise stacked bar\n  const stageStatusCounts = (() => {\n    const result = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const status = (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n      if (!result[stage]) result[stage] = {\n        stage,\n        pass: 0,\n        fail: 0,\n        continue_with_error: 0,\n        unknown: 0\n      };\n      if (result[stage][status] !== undefined) result[stage][status] += 1;else result[stage].unknown += 1;\n    });\n    return Object.values(result);\n  })();\n\n  // 2. Area vs Runtime scatter (colored by status)\n  const scatterData = data.map(row => {\n    let runtime = 0;\n    if (row['runtime(hr:min)']) {\n      const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n      runtime = h * 60 + m;\n    }\n    return {\n      area: parseFloat(row['Area(um2)']) || 0,\n      runtime,\n      status: (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase(),\n      stage: (row.stage || 'Unknown').trim()\n    };\n  }).filter(d => d.area > 0 && d.runtime > 0);\n\n  // 3. Status pie\n  const statusCounts = data.reduce((acc, row) => {\n    const status = (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n    acc[status] = (acc[status] || 0) + 1;\n    return acc;\n  }, {});\n  const statusPieData = Object.entries(statusCounts).map(([name, value]) => ({\n    name,\n    value,\n    color: STATUS_COLORS[name] || '#8884d8'\n  }));\n\n  // 4. Time trend (runs per day)\n  const timeTrend = (() => {\n    const byDate = {};\n    data.forEach(row => {\n      let date = row['run end time'] || row['run_end_time'] || '';\n      if (date.includes('/')) {\n        // Format: DD/MM/YYYY\n        const [d, m, y] = date.split('/');\n        date = `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\n      } else if (date.includes('-')) {\n        // Format: YYYY-MM-DD\n        date = date.split('T')[0];\n      }\n      if (!byDate[date]) byDate[date] = {\n        date,\n        runs: 0,\n        avg_runtime: 0,\n        total_runtime: 0\n      };\n      byDate[date].runs += 1;\n      // runtime\n      let runtime = 0;\n      if (row['runtime(hr:min)']) {\n        const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n        runtime = h * 60 + m;\n      }\n      byDate[date].total_runtime += runtime;\n    });\n    Object.values(byDate).forEach(d => {\n      d.avg_runtime = d.runs ? d.total_runtime / d.runs : 0;\n    });\n    return Object.values(byDate).sort((a, b) => a.date.localeCompare(b.date));\n  })();\n\n  // --- Heatmap Data Preparation ---\n  // Build a matrix: rows=stage, cols=block_name, value=avg runtime (min)\n  const heatmapMatrix = (() => {\n    const stageSet = new Set();\n    const blockSet = new Set();\n    const cellMap = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const block = (row.block_name || row.block || 'Unknown').trim();\n      stageSet.add(stage);\n      blockSet.add(block);\n      const key = `${stage}|||${block}`;\n      if (!cellMap[key]) cellMap[key] = {\n        sum: 0,\n        count: 0\n      };\n      cellMap[key].sum += getRuntimeMinutes(row['runtime(hr:min)']);\n      cellMap[key].count += 1;\n    });\n    const stages = Array.from(stageSet);\n    const blocks = Array.from(blockSet);\n    // Build matrix\n    const matrix = stages.map(stage => blocks.map(block => {\n      const key = `${stage}|||${block}`;\n      const cell = cellMap[key];\n      return cell && cell.count > 0 ? cell.sum / cell.count : null;\n    }));\n    // Find min/max for color scale\n    let min = Infinity,\n      max = -Infinity;\n    matrix.forEach(row => row.forEach(val => {\n      if (val !== null) {\n        if (val < min) min = val;\n        if (val > max) max = val;\n      }\n    }));\n    return {\n      stages,\n      blocks,\n      matrix,\n      min,\n      max\n    };\n  })();\n  function getHeatColor(val, min, max) {\n    if (val === null) return '#eee';\n    // Linear scale: light blue (#e0f7fa) to dark blue (#01579b)\n    const t = (val - min) / (max - min + 0.0001);\n    const r = Math.round(224 + (1 - t) * (1 - 224));\n    const g = Math.round(247 + (1 - t) * (1 - 247));\n    const b = Math.round(250 + (1 - t) * (155 - 250));\n    // Use a blue scale\n    return `rgb(${Math.round(224 - t * 209)},${Math.round(247 - t * 232)},${Math.round(250 - t * 155)})`;\n  }\n\n  // --- Chart Renderers ---\n  const renderStageBar = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: stageStatusCounts,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"stage\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        allowDecimals: false,\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"pass\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.pass,\n        name: \"Pass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"fail\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.fail,\n        name: \"Fail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"continue_with_error\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.continue_with_error,\n        name: \"Continue with Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"unknown\",\n        stackId: \"a\",\n        fill: STATUS_COLORS.unknown,\n        name: \"Unknown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n  const renderScatter = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"area\",\n        name: \"Area (um\\xB2)\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"runtime\",\n        name: \"Runtime (min)\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n        range: [100, 400]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        cursor: {\n          strokeDasharray: '3 3'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), Object.keys(STATUS_COLORS).map(status => /*#__PURE__*/_jsxDEV(Scatter, {\n        name: status.charAt(0).toUpperCase() + status.slice(1),\n        data: scatterData.filter(d => d.status === status),\n        fill: STATUS_COLORS[status]\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n  const renderPie = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(PieChart, {\n      children: [/*#__PURE__*/_jsxDEV(Pie, {\n        data: statusPieData,\n        dataKey: \"value\",\n        nameKey: \"name\",\n        cx: \"50%\",\n        cy: \"50%\",\n        outerRadius: 110,\n        label: ({\n          name,\n          percent\n        }) => `${name} ${(percent * 100).toFixed(0)}%`,\n        children: statusPieData.map((entry, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: entry.color,\n          stroke: \"#fff\",\n          strokeWidth: 2\n        }, `cell-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n  const renderTimeTrend = () => /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 340,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: timeTrend,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 0,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        allowDecimals: false,\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        stroke: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"left\",\n        type: \"monotone\",\n        dataKey: \"runs\",\n        stroke: \"#00d2ff\",\n        name: \"Runs\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        yAxisId: \"right\",\n        type: \"monotone\",\n        dataKey: \"avg_runtime\",\n        stroke: \"#ff6b6b\",\n        name: \"Avg Runtime (min)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n  const renderHeatmap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"heatmap-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-title\",\n      children: \"Stage vs Block Heatmap (Avg Runtime in min)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-grid\",\n      style: {\n        gridTemplateColumns: `120px repeat(${heatmapMatrix.blocks.length}, 1fr)`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-corner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), heatmapMatrix.blocks.map(block => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-header\",\n        children: block\n      }, block, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)), heatmapMatrix.stages.map((stage, i) => [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-header\",\n        children: stage\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), ...heatmapMatrix.matrix[i].map((val, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-cell\",\n        style: {\n          background: getHeatColor(val, heatmapMatrix.min, heatmapMatrix.max)\n        },\n        children: val !== null ? val.toFixed(1) : ''\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this))])]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heatmap-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [heatmapMatrix.min.toFixed(1), \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heatmap-legend-bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [heatmapMatrix.max.toFixed(1), \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n\n  // --- Main Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Data Analytics Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'stage' ? 'active' : '',\n          onClick: () => setChartType('stage'),\n          children: \"Stage-wise Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'scatter' ? 'active' : '',\n          onClick: () => setChartType('scatter'),\n          children: \"Area vs Runtime\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'pie' ? 'active' : '',\n          onClick: () => setChartType('pie'),\n          children: \"Status Pie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'trend' ? 'active' : '',\n          onClick: () => setChartType('trend'),\n          children: \"Time Trend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: chartType === 'heatmap' ? 'active' : '',\n          onClick: () => setChartType('heatmap'),\n          children: \"Heatmap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [chartType === 'stage' && renderStageBar(), chartType === 'scatter' && renderScatter(), chartType === 'pie' && renderPie(), chartType === 'trend' && renderTimeTrend(), chartType === 'heatmap' && renderHeatmap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatView, \"psFt8gF0OOgYkJNma6DeBAIEG8U=\");\n_c = ChatView;\nexport default ChatView;\nvar _c;\n$RefreshReg$(_c, \"ChatView\");","map":{"version":3,"names":["React","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","ScatterChart","Scatter","LineChart","Line","ZAxis","jsxDEV","_jsxDEV","STATUS_COLORS","pass","fail","continue_with_error","unknown","getRuntimeMinutes","str","includes","h","m","split","map","Number","isNaN","ChatView","data","stats","_s","chartType","setChartType","stageStatusCounts","result","forEach","row","stage","trim","status","run_status","replace","toLowerCase","undefined","Object","values","scatterData","runtime","area","parseFloat","filter","d","statusCounts","reduce","acc","statusPieData","entries","name","value","color","timeTrend","byDate","date","y","padStart","runs","avg_runtime","total_runtime","sort","a","b","localeCompare","heatmapMatrix","stageSet","Set","blockSet","cellMap","block","block_name","add","key","sum","count","stages","Array","from","blocks","matrix","cell","min","Infinity","max","val","getHeatColor","t","r","Math","round","g","renderStageBar","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","stroke","allowDecimals","stackId","fill","renderScatter","range","cursor","keys","charAt","toUpperCase","slice","renderPie","nameKey","cx","cy","outerRadius","label","percent","toFixed","entry","idx","strokeWidth","renderTimeTrend","yAxisId","orientation","type","renderHeatmap","className","style","gridTemplateColumns","length","i","j","background","onClick","_c","$RefreshReg$"],"sources":["C:/Users/2020r/dashboard/frontend/src/components/ChatView.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, ScatterChart, Scatter, LineChart, Line, ZAxis } from 'recharts';\nimport './ChatView.css';\n\nconst STATUS_COLORS = {\n  pass: '#00ff88',\n  fail: '#ff4757',\n  continue_with_error: '#ffa502',\n  unknown: '#8884d8',\n};\n\nfunction getRuntimeMinutes(str) {\n  if (!str || typeof str !== 'string' || !str.includes(':')) return 0;\n  const [h, m] = str.split(':').map(Number);\n  return (isNaN(h) ? 0 : h) * 60 + (isNaN(m) ? 0 : m);\n}\n\nconst ChatView = ({ data, stats }) => {\n  const [chartType, setChartType] = useState('stage');\n\n  // --- Data Preparation ---\n  // 1. Stage-wise stacked bar\n  const stageStatusCounts = (() => {\n    const result = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const status = (row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n      if (!result[stage]) result[stage] = { stage, pass: 0, fail: 0, continue_with_error: 0, unknown: 0 };\n      if (result[stage][status] !== undefined) result[stage][status] += 1;\n      else result[stage].unknown += 1;\n    });\n    return Object.values(result);\n  })();\n\n  // 2. Area vs Runtime scatter (colored by status)\n  const scatterData = data.map(row => {\n    let runtime = 0;\n    if (row['runtime(hr:min)']) {\n      const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n      runtime = h * 60 + m;\n    }\n    return {\n      area: parseFloat(row['Area(um2)']) || 0,\n      runtime,\n      status: (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase(),\n      stage: (row.stage || 'Unknown').trim(),\n    };\n  }).filter(d => d.area > 0 && d.runtime > 0);\n\n  // 3. Status pie\n  const statusCounts = data.reduce((acc, row) => {\n    const status = (row['run status  (pass/fail/continue_with_error)'] || row.run_status || 'unknown').replace(/\\s/g, '').toLowerCase();\n    acc[status] = (acc[status] || 0) + 1;\n    return acc;\n  }, {});\n  const statusPieData = Object.entries(statusCounts).map(([name, value]) => ({ name, value, color: STATUS_COLORS[name] || '#8884d8' }));\n\n  // 4. Time trend (runs per day)\n  const timeTrend = (() => {\n    const byDate = {};\n    data.forEach(row => {\n      let date = row['run end time'] || row['run_end_time'] || '';\n      if (date.includes('/')) {\n        // Format: DD/MM/YYYY\n        const [d, m, y] = date.split('/');\n        date = `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\n      } else if (date.includes('-')) {\n        // Format: YYYY-MM-DD\n        date = date.split('T')[0];\n      }\n      if (!byDate[date]) byDate[date] = { date, runs: 0, avg_runtime: 0, total_runtime: 0 };\n      byDate[date].runs += 1;\n      // runtime\n      let runtime = 0;\n      if (row['runtime(hr:min)']) {\n        const [h, m] = row['runtime(hr:min)'].split(':').map(Number);\n        runtime = h * 60 + m;\n      }\n      byDate[date].total_runtime += runtime;\n    });\n    Object.values(byDate).forEach(d => {\n      d.avg_runtime = d.runs ? d.total_runtime / d.runs : 0;\n    });\n    return Object.values(byDate).sort((a, b) => a.date.localeCompare(b.date));\n  })();\n\n  // --- Heatmap Data Preparation ---\n  // Build a matrix: rows=stage, cols=block_name, value=avg runtime (min)\n  const heatmapMatrix = (() => {\n    const stageSet = new Set();\n    const blockSet = new Set();\n    const cellMap = {};\n    data.forEach(row => {\n      const stage = (row.stage || 'Unknown').trim();\n      const block = (row.block_name || row.block || 'Unknown').trim();\n      stageSet.add(stage);\n      blockSet.add(block);\n      const key = `${stage}|||${block}`;\n      if (!cellMap[key]) cellMap[key] = { sum: 0, count: 0 };\n      cellMap[key].sum += getRuntimeMinutes(row['runtime(hr:min)']);\n      cellMap[key].count += 1;\n    });\n    const stages = Array.from(stageSet);\n    const blocks = Array.from(blockSet);\n    // Build matrix\n    const matrix = stages.map(stage =>\n      blocks.map(block => {\n        const key = `${stage}|||${block}`;\n        const cell = cellMap[key];\n        return cell && cell.count > 0 ? cell.sum / cell.count : null;\n      })\n    );\n    // Find min/max for color scale\n    let min = Infinity, max = -Infinity;\n    matrix.forEach(row => row.forEach(val => {\n      if (val !== null) {\n        if (val < min) min = val;\n        if (val > max) max = val;\n      }\n    }));\n    return { stages, blocks, matrix, min, max };\n  })();\n\n  function getHeatColor(val, min, max) {\n    if (val === null) return '#eee';\n    // Linear scale: light blue (#e0f7fa) to dark blue (#01579b)\n    const t = (val - min) / (max - min + 0.0001);\n    const r = Math.round(224 + (1 - t) * (1 - 224));\n    const g = Math.round(247 + (1 - t) * (1 - 247));\n    const b = Math.round(250 + (1 - t) * (155 - 250));\n    // Use a blue scale\n    return `rgb(${Math.round(224 - t * 209)},${Math.round(247 - t * 232)},${Math.round(250 - t * 155)})`;\n  }\n\n  // --- Chart Renderers ---\n  const renderStageBar = () => (\n    <ResponsiveContainer width=\"100%\" height={340}>\n      <BarChart data={stageStatusCounts} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"stage\" stroke=\"#fff\" />\n        <YAxis allowDecimals={false} stroke=\"#fff\" />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"pass\" stackId=\"a\" fill={STATUS_COLORS.pass} name=\"Pass\" />\n        <Bar dataKey=\"fail\" stackId=\"a\" fill={STATUS_COLORS.fail} name=\"Fail\" />\n        <Bar dataKey=\"continue_with_error\" stackId=\"a\" fill={STATUS_COLORS.continue_with_error} name=\"Continue with Error\" />\n        <Bar dataKey=\"unknown\" stackId=\"a\" fill={STATUS_COLORS.unknown} name=\"Unknown\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  const renderScatter = () => (\n    <ResponsiveContainer width=\"100%\" height={340}>\n      <ScatterChart>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"area\" name=\"Area (um²)\" stroke=\"#fff\" />\n        <YAxis dataKey=\"runtime\" name=\"Runtime (min)\" stroke=\"#fff\" />\n        <ZAxis range={[100, 400]} />\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n        <Legend />\n        {Object.keys(STATUS_COLORS).map(status => (\n          <Scatter\n            key={status}\n            name={status.charAt(0).toUpperCase() + status.slice(1)}\n            data={scatterData.filter(d => d.status === status)}\n            fill={STATUS_COLORS[status]}\n          />\n        ))}\n      </ScatterChart>\n    </ResponsiveContainer>\n  );\n\n  const renderPie = () => (\n    <ResponsiveContainer width=\"100%\" height={340}>\n      <PieChart>\n        <Pie\n          data={statusPieData}\n          dataKey=\"value\"\n          nameKey=\"name\"\n          cx=\"50%\"\n          cy=\"50%\"\n          outerRadius={110}\n          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n        >\n          {statusPieData.map((entry, idx) => (\n            <Cell key={`cell-${idx}`} fill={entry.color} stroke=\"#fff\" strokeWidth={2} />\n          ))}\n        </Pie>\n        <Tooltip />\n        <Legend />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n\n  const renderTimeTrend = () => (\n    <ResponsiveContainer width=\"100%\" height={340}>\n      <LineChart data={timeTrend} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" stroke=\"#fff\" />\n        <YAxis yAxisId=\"left\" allowDecimals={false} stroke=\"#fff\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#fff\" />\n        <Tooltip />\n        <Legend />\n        <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"runs\" stroke=\"#00d2ff\" name=\"Runs\" strokeWidth={3} />\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avg_runtime\" stroke=\"#ff6b6b\" name=\"Avg Runtime (min)\" strokeWidth={3} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  const renderHeatmap = () => (\n    <div className=\"heatmap-container\">\n      <div className=\"heatmap-title\">Stage vs Block Heatmap (Avg Runtime in min)</div>\n      <div className=\"heatmap-grid\" style={{ gridTemplateColumns: `120px repeat(${heatmapMatrix.blocks.length}, 1fr)` }}>\n        <div className=\"heatmap-corner\"></div>\n        {heatmapMatrix.blocks.map(block => (\n          <div key={block} className=\"heatmap-header\">{block}</div>\n        ))}\n        {heatmapMatrix.stages.map((stage, i) => [\n          <div key={stage} className=\"heatmap-header\">{stage}</div>,\n          ...heatmapMatrix.matrix[i].map((val, j) => (\n            <div key={j} className=\"heatmap-cell\" style={{ background: getHeatColor(val, heatmapMatrix.min, heatmapMatrix.max) }}>\n              {val !== null ? val.toFixed(1) : ''}\n            </div>\n          ))\n        ])}\n      </div>\n      <div className=\"heatmap-legend\">\n        <span>{heatmapMatrix.min.toFixed(1)} min</span>\n        <div className=\"heatmap-legend-bar\"></div>\n        <span>{heatmapMatrix.max.toFixed(1)} min</span>\n      </div>\n    </div>\n  );\n\n  // --- Main Render ---\n  return (\n    <div className=\"chat-view\">\n      <div className=\"chat-header\">\n        <h3>📊 Data Analytics Chat</h3>\n        <div className=\"chat-controls\">\n          <button className={chartType === 'stage' ? 'active' : ''} onClick={() => setChartType('stage')}>Stage-wise Status</button>\n          <button className={chartType === 'scatter' ? 'active' : ''} onClick={() => setChartType('scatter')}>Area vs Runtime</button>\n          <button className={chartType === 'pie' ? 'active' : ''} onClick={() => setChartType('pie')}>Status Pie</button>\n          <button className={chartType === 'trend' ? 'active' : ''} onClick={() => setChartType('trend')}>Time Trend</button>\n          <button className={chartType === 'heatmap' ? 'active' : ''} onClick={() => setChartType('heatmap')}>Heatmap</button>\n        </div>\n      </div>\n      <div className=\"chat-content\">\n        <div className=\"chart-section\">\n          {chartType === 'stage' && renderStageBar()}\n          {chartType === 'scatter' && renderScatter()}\n          {chartType === 'pie' && renderPie()}\n          {chartType === 'trend' && renderTimeTrend()}\n          {chartType === 'heatmap' && renderHeatmap()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}