{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2020r\\\\dashboard\\\\frontend\\\\src\\\\components\\\\FluidBackground.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport './FluidBackground.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FluidBackground = ({\n  opacity = 0.3,\n  intensity = 0.3,\n  speed = 0.5,\n  color = '#4a90e2'\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create fluid particles\n    const particleCount = 500; // Fewer particles for background\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n\n    // Parse color\n    const colorObj = new THREE.Color(color);\n    for (let i = 0; i < particleCount; i++) {\n      // Random positions in a larger sphere\n      const radius = Math.random() * 8;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(Math.random() * 2 - 1);\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i * 3 + 2] = radius * Math.cos(phi);\n\n      // Colors with variation\n      const colorVariation = 0.2;\n      colors[i * 3] = colorObj.r + (Math.random() - 0.5) * colorVariation;\n      colors[i * 3 + 1] = colorObj.g + (Math.random() - 0.5) * colorVariation;\n      colors[i * 3 + 2] = colorObj.b + (Math.random() - 0.5) * colorVariation;\n    }\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    // Shader material for fluid effect\n    const fluidMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        },\n        intensity: {\n          value: intensity\n        },\n        speed: {\n          value: speed\n        },\n        opacity: {\n          value: opacity\n        }\n      },\n      vertexShader: `\n        attribute vec3 color;\n        varying vec3 vColor;\n        varying float vAlpha;\n        uniform float time;\n        uniform float intensity;\n        uniform float speed;\n        \n        void main() {\n          vColor = color;\n          \n          // Create subtle fluid motion\n          vec3 pos = position;\n          float t = time * speed;\n          \n          // Add gentle wave motion\n          pos.x += sin(t + position.y * 0.2) * 0.05 * intensity;\n          pos.y += cos(t + position.z * 0.2) * 0.05 * intensity;\n          pos.z += sin(t + position.x * 0.2) * 0.05 * intensity;\n          \n          // Calculate alpha based on distance from center\n          float dist = length(pos);\n          vAlpha = (1.0 - smoothstep(0.0, 8.0, dist)) * 0.5;\n          \n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          gl_PointSize = 2.0 * vAlpha;\n        }\n      `,\n      fragmentShader: `\n        varying vec3 vColor;\n        varying float vAlpha;\n        uniform float opacity;\n        \n        void main() {\n          float dist = length(gl_PointCoord - vec2(0.5));\n          float alpha = smoothstep(0.5, 0.0, dist) * vAlpha * opacity;\n          gl_FragColor = vec4(vColor, alpha);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n    const fluidParticles = new THREE.Points(particles, fluidMaterial);\n    scene.add(fluidParticles);\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n      const time = Date.now() * 0.001;\n      fluidMaterial.uniforms.time.value = time;\n\n      // Gentle camera movement\n      camera.position.x = Math.sin(time * 0.05) * 1;\n      camera.position.z = Math.cos(time * 0.05) * 1 + 5;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n    animate();\n    setIsInitialized(true);\n\n    // Cleanup\n    return () => {\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [opacity, intensity, speed, color]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fluid-background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"fluid-background-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(FluidBackground, \"8GJVqtyaMEW87LSGGjfJBA3qpEw=\");\n_c = FluidBackground;\nexport default FluidBackground;\nvar _c;\n$RefreshReg$(_c, \"FluidBackground\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","jsxDEV","_jsxDEV","FluidBackground","opacity","intensity","speed","color","_s","mountRef","sceneRef","rendererRef","animationIdRef","isInitialized","setIsInitialized","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","powerPreference","setSize","setClearColor","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","particleCount","particles","BufferGeometry","positions","Float32Array","colors","colorObj","Color","i","radius","random","theta","PI","phi","acos","sin","cos","colorVariation","r","g","b","setAttribute","BufferAttribute","fluidMaterial","ShaderMaterial","uniforms","time","value","vertexShader","fragmentShader","transparent","blending","AdditiveBlending","depthWrite","fluidParticles","Points","add","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","Date","now","x","lookAt","render","cancelAnimationFrame","removeEventListener","removeChild","dispose","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/2020r/dashboard/frontend/src/components/FluidBackground.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport './FluidBackground.css';\r\n\r\nconst FluidBackground = ({ \r\n  opacity = 0.3,\r\n  intensity = 0.3,\r\n  speed = 0.5,\r\n  color = '#4a90e2'\r\n}) => {\r\n  const mountRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const animationIdRef = useRef(null);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    sceneRef.current = scene;\r\n\r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.z = 5;\r\n\r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      antialias: true, \r\n      alpha: true,\r\n      powerPreference: \"high-performance\"\r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    rendererRef.current = renderer;\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create fluid particles\r\n    const particleCount = 500; // Fewer particles for background\r\n    const particles = new THREE.BufferGeometry();\r\n    const positions = new Float32Array(particleCount * 3);\r\n    const colors = new Float32Array(particleCount * 3);\r\n\r\n    // Parse color\r\n    const colorObj = new THREE.Color(color);\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n      // Random positions in a larger sphere\r\n      const radius = Math.random() * 8;\r\n      const theta = Math.random() * Math.PI * 2;\r\n      const phi = Math.acos(Math.random() * 2 - 1);\r\n\r\n      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\r\n      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);\r\n      positions[i * 3 + 2] = radius * Math.cos(phi);\r\n\r\n      // Colors with variation\r\n      const colorVariation = 0.2;\r\n      colors[i * 3] = colorObj.r + (Math.random() - 0.5) * colorVariation;\r\n      colors[i * 3 + 1] = colorObj.g + (Math.random() - 0.5) * colorVariation;\r\n      colors[i * 3 + 2] = colorObj.b + (Math.random() - 0.5) * colorVariation;\r\n    }\r\n\r\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n\r\n    // Shader material for fluid effect\r\n    const fluidMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        time: { value: 0 },\r\n        intensity: { value: intensity },\r\n        speed: { value: speed },\r\n        opacity: { value: opacity }\r\n      },\r\n      vertexShader: `\r\n        attribute vec3 color;\r\n        varying vec3 vColor;\r\n        varying float vAlpha;\r\n        uniform float time;\r\n        uniform float intensity;\r\n        uniform float speed;\r\n        \r\n        void main() {\r\n          vColor = color;\r\n          \r\n          // Create subtle fluid motion\r\n          vec3 pos = position;\r\n          float t = time * speed;\r\n          \r\n          // Add gentle wave motion\r\n          pos.x += sin(t + position.y * 0.2) * 0.05 * intensity;\r\n          pos.y += cos(t + position.z * 0.2) * 0.05 * intensity;\r\n          pos.z += sin(t + position.x * 0.2) * 0.05 * intensity;\r\n          \r\n          // Calculate alpha based on distance from center\r\n          float dist = length(pos);\r\n          vAlpha = (1.0 - smoothstep(0.0, 8.0, dist)) * 0.5;\r\n          \r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\r\n          gl_PointSize = 2.0 * vAlpha;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vColor;\r\n        varying float vAlpha;\r\n        uniform float opacity;\r\n        \r\n        void main() {\r\n          float dist = length(gl_PointCoord - vec2(0.5));\r\n          float alpha = smoothstep(0.5, 0.0, dist) * vAlpha * opacity;\r\n          gl_FragColor = vec4(vColor, alpha);\r\n        }\r\n      `,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false\r\n    });\r\n\r\n    const fluidParticles = new THREE.Points(particles, fluidMaterial);\r\n    scene.add(fluidParticles);\r\n\r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      animationIdRef.current = requestAnimationFrame(animate);\r\n\r\n      const time = Date.now() * 0.001;\r\n      fluidMaterial.uniforms.time.value = time;\r\n\r\n      // Gentle camera movement\r\n      camera.position.x = Math.sin(time * 0.05) * 1;\r\n      camera.position.z = Math.cos(time * 0.05) * 1 + 5;\r\n      camera.lookAt(0, 0, 0);\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n    setIsInitialized(true);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (animationIdRef.current) {\r\n        cancelAnimationFrame(animationIdRef.current);\r\n      }\r\n      window.removeEventListener('resize', handleResize);\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, [opacity, intensity, speed, color]);\r\n\r\n  return (\r\n    <div className=\"fluid-background\">\r\n      <div \r\n        ref={mountRef} \r\n        className=\"fluid-background-canvas\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FluidBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}